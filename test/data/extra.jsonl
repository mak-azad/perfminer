{"idx": 2787, "commit_message": "Improves drastically input performance by using ExecutorService instead of AsyncTask", "target": 1}
{"idx": 270, "commit_message": "Improved Flat Generator (bedrock + dirt + dirt + grass + air)", "target": 0}
{"idx": 3894, "commit_message": "Merge tag 'iio-for-5.3b' of [URL]/pub/scm/linux/kernel/git/jic23/iio into staging-next  Jonathan writes:  Second set of IIO device support, features, cleanups and minor fixes for 5.3.  A few bits for the counters subsystem mixed in here as well. There are some late breaking fixes as well, which aren't so urgent they can't wait for the merge window.  New Device Support * adf4371   - New driver + bindings.   - Support the adf4372 PLL. Mostly ID and bindings. * ad8366 (note includes rework of driver needed to allow support for these).   - Support the ADL5240 variable gain amplifier (VGA).   - Support the ADA4961 digital gain amplifier (DGA). * dps310   - New driver, in several parts from different authors for this temp     and pressure sensor.   - Includes errata workaround for a temperature reading issue. * stk3310   - Support the stk3335, mostly ID.  Features and cleanups * core   - drop error handling on debugfs registration.   - harden by making sure we don't overrun iio_chan_info_postfix. * docs   - convert remaining docs to rst. At somepoint we'll fit these few     into the main IIO docs.   - improve sampling_frequency_available docs but explaining the     range form. * ad_sigma_delta   - Drop a pointless goto. * ad2s1210   - Drop pointless platform data null check seeing as we don't actually     use platform data anymore. * ad7124   - Relax limitation on channel numbers to allow pseudo different channels.   - Support control of whether the input is buffered via DT.   - Use dynamic allocation for channel configuration to make it easier     to support new devices.   - YAML binding conversion. * ad7150   - Comment tidy up.   - Consistent and simple if (ret) handling of i2c errors.   - FIELD_GET and GENMASK.   - Ternary rather than !!(condition) for readability.   - Use macros to avoid repetition of channel definitions. * ad7606   - Add software channel config (rather that pin controlled)   - Refactor to simplify addition of new part in future. * ad7746   - of_deivce_id table. * ad7780   - MAINTAINERS entry   - YAML DT bindings. * ad8366   - Stop using core mlock in favour of well scoped local lock.   - SPDX + copyright date update. * ad9834   - of_device_id table * adf4371   - Add support for output stage muting before lock on has occured. * adis library   - MAINTAINERS entry to reflect that this now Alexandru's problem ;) * adis162xx:   - Fix a slightly incorrect set of comments and print statements on     minimum supported voltage. * adis16203   - of_device_id table. * adis16240   - Add of_device_id table (in two parts as first patch only used it for     MODULE_DEVICE_TABLE.) * adt7316-spi   - of_device_id table * adxl372   - YAML DT binding conversion.   - Cleanup use of buffer callback functions (precursor to core rework). * bh1710   - Simplify getting the i2c adapter from the client. * dht11   - Mote to newer GPIO consumer interface. * kxcjk-1013.c   - Add binding for sensor in display of some ultrabooks after userspace     tools updated for it not be a problem to report two similar sensors. * imx7d   - drop unused variables.   - white space   - define instead of variable for clock frequency that is fixed.   - drop pointless error message. * messon_saradc   - SPDX * sps30   - MAINTAINERS entry   - YAML binding conversion. * st_accel   - Tidy up ordering in various buffer related callbacks. This is     part of a long running effort to simplify the core code. * stm32-dfsdm:   - Manage the resolution cleanly in triggerd modes.   - Add fast mode support which allows more flexible filter choices.   - Add a comment on the reason for a 16 bit record when technically     not 'required'. * st_lsm6dsx   - Embed device name in the sensor_settings struct as i3c doesn't     have a convenient name field to use for this. * xilinx-adc   - Relax constraints on supported platforms to reflect that this     can used with FPGAs on PCIe cards and hence many architectures. * counters/ftm-quaddec   - Fix some formatting io MODULE_AUTHOR   - MAINTAINERS entry  Fixes * tools   - fix incorrect handling of 32 bit channels. * sca3000   - Potential endian bug that is unlikely to bite anyone (be64 host     seems unlikely for this old part). * stm32-adc   - Add vdda-supply. On some boards it needs to be turned on to supply     the ADC.  DT bindings included. * stm32-dfsdm   - Fix output resolution to work with filter orders other than 3.   - Fix output datatype as it's signed and previously claimed not to be.  * tag 'iio-for-5.3b' of [URL]/pub/scm/linux/kernel/git/jic23/iio: (68 commits)   iio: iio-utils: Fix possible incorrect mask calculation   iio: frequency: adf4371: Add support for output stage mute   dt-bindings: iio: frequency: Add ADF4372 PLL documentation   iio: frequency: adf4371: Add support for ADF4372 PLL   dt-bindings: iio: adc: Add buffered input property   Convert AD7124 bindings documentation to YAML format.   iio: adc: ad7124: Shift to dynamic allocation for channel configuration   iio: adc: ad7124: Add buffered input support   iio: adc: ad7124: Remove input number limitation   MAINTAINERS: add ADIS IMU driver library entry   iio: adis162xx: fix low-power docs & reports   counter/ftm-quaddec: Add missing '>' in MODULE_AUTHOR   iio: core: no need to check return value of debugfs_create functions   docs: iio: convert to ReST   iio: adc: stm32-adc: add missing vdda-supply   dt-bindings: iio: adc: stm32: add missing vdda supply   iio: adc: stm32-dfsdm: add comment for 16 bits record   iio: adc: stm32-dfsdm: add fast mode support   iio: adc: stm32-dfsdm: manage data resolution in trigger mode   iio: adc: stm32-dfsdm: fix data type   ...", "target": 0}
{"idx": 1823, "commit_message": "Merge pull request #3 from ExpediaInc/feature-minor-optimizations  Cache some semi expensive values that are looked up on every message.", "target": 1}
{"idx": 1770, "commit_message": "Optimize orphan transaction handling  Changes suggested by Sergio Demian Lerner to help prevent potential DoS attacks.", "target": 1}
{"idx": 2064, "commit_message": "Merge branch 'sched-core-for-linus' of [URL]/pub/scm/linux/kernel/git/tip/tip  Pull scheduler updates from Ingo Molnar:  \"The main changes in this cycle are:     - Make schedstats a runtime tunable (disabled by default) and      optimize it via static keys.       As most distributions enable CONFIG_SCHEDSTATS=y due to its      instrumentation value, this is a nice performance enhancement.      (Mel Gorman)     - Implement 'simple waitqueues' (swait): these are just pure      waitqueues without any of the more complex features of full-blown      waitqueues (callbacks, wake flags, wake keys, etc.).  Simple      waitqueues have less memory overhead and are faster.       Use simple waitqueues in the RCU code (in 4 different places) and      for handling KVM vCPU wakeups.       (Peter Zijlstra, Daniel Wagner, Thomas Gleixner, Paul Gortmaker,      Marcelo Tosatti)     - sched/numa enhancements (Rik van Riel)     - NOHZ performance enhancements (Rik van Riel)     - Various sched/deadline enhancements (Steven Rostedt)     - Various fixes (Peter Zijlstra)     - ... and a number of other fixes, cleanups and smaller enhancements\"  * 'sched-core-for-linus' of [URL]/pub/scm/linux/kernel/git/tip/tip: (29 commits)   sched/cputime: Fix steal_account_process_tick() to always return jiffies   sched/deadline: Remove dl_new from struct sched_dl_entity   Revert \"kbuild: Add option to turn incompatible pointer check into error\"   sched/deadline: Remove superfluous call to switched_to_dl()   sched/debug: Fix preempt_disable_ip recording for preempt_disable()   sched, time: Switch VIRT_CPU_ACCOUNTING_GEN to jiffy granularity   time, acct: Drop irq save & restore from __acct_update_integrals()   acct, time: Change indentation in __acct_update_integrals()   sched, time: Remove non-power-of-two divides from __acct_update_integrals()   sched/rt: Kick RT bandwidth timer immediately on start up   sched/debug: Add deadline scheduler bandwidth ratio to /proc/sched_debug   sched/debug: Move sched_domain_sysctl to debug.c   sched/debug: Move the /sys/kernel/debug/sched_features file setup into debug.c   sched/rt: Fix PI handling vs. sched_setscheduler()   sched/core: Remove duplicated sched_group_set_shares() prototype   sched/fair: Consolidate nohz CPU load update code   sched/fair: Avoid using decay_load_missed() with a negative value   sched/deadline: Always calculate end of period on sched_yield()   sched/cgroup: Fix cgroup entity load tracking tear-down   rcu: Use simple wait queues where possible in rcutree   ...", "target": 1}
{"idx": 1571, "commit_message": "First stab. Not efficient", "target": 0}
{"idx": 3977, "commit_message": "Improve performance  * Major improvements to the string constructor and string output handling by   breaking large operations into smaller ones.", "target": 1}
{"idx": 2560, "commit_message": "[FIX] account: limit search for fields_view_get to one result  + use ir.model.data get_object_reference method for better performance (cached result)  opw-616616", "target": 1}
{"idx": 3895, "commit_message": "m7: Use performance cpufreq governor by default   * This improves bootup time. Userspace will switch governors after    boot is completed.", "target": 1}
{"idx": 4002, "commit_message": "[PATCH] Greatly improved the performance of copy::GeneralPurpose by\n exploiting the tensor product structure of the integer metadata calculations", "target": 1}
{"idx": 109, "commit_message": "Improve changelog [skip ci]   Former-commit-id: de9dba6cb18488eb4d6a42f23be26a82823b25a0", "target": 0}
{"idx": 3875, "commit_message": "more improvement on searches#reporting.  added an 'all' operator to select all objects of a particular class. improved the UI a bit. fixed some bugs to do with chaining queries. gave the result 'printer' layout by default to speed up page rendering.  custom reports are now FAST!", "target": 1}
{"idx": 1941, "commit_message": "track dc ad performance", "target": 0}
{"idx": 4082, "commit_message": "[PATCH] Add new constructor to Iso_rectangle_2(Point_2, Point_2,\n int). The additional dummy \"int\" specifies that the 2 points are the\n lower-left and upper-right corner.  This is more efficient when one knows\n they are already in this configuration.\n\nSame thing for Iso_cuboid_3, and the functors.\n\nUse them in Cartesian_converter and Homogeneous_converter.", "target": 1}
{"idx": 557, "commit_message": "Add missing gpu attr", "target": 0}
{"idx": 3211, "commit_message": "Adding performance debug times, begin somes improvements", "target": 0}
{"idx": 2947, "commit_message": "Merge pull request #1534 from hellt/patch-2  reflect improved  support for Nokia SR OS", "target": 0}
{"idx": 356, "commit_message": "CALWEB-987 - Improve handling of events with COUNT = 1", "target": 0}
{"idx": 2121, "commit_message": "This is a potential fix for issue #1242  The big slowdown we've been seeing recently seems to be due to image file preview in menus (c4fee53f6e21d1e930177798fa01caf9778a8774) but I think the bigger problem is that we appear to be completely rebuilding the inspector pane on every update of the timeline position. Even if I comment out c4fee5 I still see a lot of heavyweight operations happening on every timeline position change.  This is a proposed fix which does not rebuild the inspector with every update. Instead it has the contained inspector values refresh themselves on every update. So far it looks promising with big performance improvements. It looks like some inspector value objects (InspectorColor3 for example) will need to have their refresh methods implemented though since some controls are not refreshing in response to timeline changes.", "target": 1}
{"idx": 365, "commit_message": "segv because dir/filepath is unused by var key, need space optimize later", "target": 0}
{"idx": 2339, "commit_message": "Improve grid performance on firefox", "target": 1}
{"idx": 3020, "commit_message": "Performance enhancement. Instead of blacklisting certain extentions that are likely not source files, we are now whitelisting all common code and script file extentions. The linking algorithm really suffers to unreasonable performance when doing massive changes that usually are seen in changelogs or documentation, and therefore now we completely exclude them in the SZZ corrective to bug inducing commit linking.", "target": 1}
{"idx": 3060, "commit_message": "Performance and code readability improvements", "target": 1}
{"idx": 2387, "commit_message": "tableMaker uses at least 2 parameters for tables and made runMode more efficient by allowing specification of program that executes herefile", "target": 1}
{"idx": 1461, "commit_message": "debug-config: 8610: add SCSI logging related configs  This change enables the configs related to (1) USB Core (2) EHCI (3) USB Audio (4) USB Networking Devices (5) USB Storage devices", "target": 0}
{"idx": 493, "commit_message": "Speed up move generation  Pass the color as template parameter to generate_all()  Speedup of 1,3% in perft and 2,5% in bench !  No functional change.", "target": 1}
{"idx": 766, "commit_message": "PR #7075 from Eran: Small optimization in AC plus removal of two annoying repetitive messages in Viewer", "target": 1}
{"idx": 2028, "commit_message": "v 0.1.0   * comb.define performance increase   * Changed HashTable to use strict equal   * Doc fixes", "target": 1}
{"idx": 296, "commit_message": "Always wait for DataReady() on Windows WaveOut.  Only WaveOut still needs this hack and since all renderer clients now use the shared memory marker we can always wait for it.  I suspect on low end machines this timeout is leading to pops and clicks for some users on XP.  BUG=161307 TEST=audio still works.  Review URL: [URL]/11348166", "target": 0}
{"idx": 2182, "commit_message": "Performance improvement", "target": 1}
{"idx": 2361, "commit_message": "Merge branch 'tcp-optimizations'  Eric Dumazet says:  ==================== tcp: optimizations for linux-5.17  Mostly small improvements in this series.  The notable change is in \"defer skb freeing after socket lock is released\" in recvmsg() (and RX zerocopy)  The idea is to try to let skb freeing to BH handler, whenever possible, or at least perform the freeing outside of the socket lock section, for much improved performance. This idea can probably be extended to other protocols.   Tests on a 100Gbit NIC  Max throughput for one TCP_STREAM flow, over 10 runs.   MTU : 1500  (1428 bytes of TCP payload per MSS)  Before: 55 Gbit  After:  66 Gbit   MTU : 4096+ (4096 bytes of TCP payload, plus TCP/IPv6 headers)  Before: 82 Gbit  After:  95 Gbit ====================  Acked-by: Soheil Hassas Yeganeh [URL]>", "target": 1}
{"idx": 405, "commit_message": "IHCIC-11 Fixing string buffer fields and inefficient string buffering", "target": 1}
{"idx": 3408, "commit_message": "Remove SkTextBlobDiffCanvas, use tracking device directly with base SkCanvas  Chromium has been updated to use makeAnalysisCanvas directly and there are no more references to SkTextBlobDiffCanvas as a type in its code base.  Since the GlyphTrackingDevice extends SkNoPixelsDevice, any SkCanvas that uses it is effectively a \"no-draw\" canvas. However, by returning a base SkCanvas the text tracking now automatically happens in the context of the base's AutoLayerForImageFilter handling it applies on every draw. This means that drawing a text blob with an image filter that modifies the transform state will now be analyzed in that context automatically (simplifying code in chrome after this lands).  Another behavioral change is that all non-text draws will still go through the base SkCanvas' virtuals and invoke the device function. Since it's an SkNoPixelsDevice, it'll still be a no-op, it just happens a little later. This won't really impact performance because oop-r already inspects their operations and only plays back text and transform related ones to the analysis canvas, so we shouldn't really see non-text draws being invoked anyways.  Bug: chromium:1187246", "target": 1}
{"idx": 4054, "commit_message": "[PATCH] Use new style with make_array(), more compact and efficient", "target": 1}
{"idx": 835, "commit_message": "Add docs for AeadAlgorithm class", "target": 0}
{"idx": 91, "commit_message": "Make showOneMimePart, keepEncryptions and includeSignatures members instead of parameters.  svn path=/trunk/kdenetwork/kmail/; revision=199346", "target": 0}
{"idx": 1176, "commit_message": "Improve article content readability in ArticleActivity", "target": 0}
{"idx": 1341, "commit_message": "update from upstream (#8)  * Icon updated    * Version 0.50.2    * Fix icons    * Tweaks to the About window    * Full Screen - Closes #145    * Version 0.50.4    * Add German translation (de_DE)    * Install and use translations    * Version bump    * Update README and move icons    * Fix linguist lrelease path    * Fix build with lrelease    * Fixing Repo links    * always use tabSize from the preferences when converting tabs to spaces    * Indent tab to space function    * } on its own line    * Update ui.pro    Add notepadqq_hu.ts file to ui.pro file    * Don't translate keyboard shortcuts    This will fix bug #167    * Add HU ts file    * Fix casing for search dialog (fixes #161)    * added Shift+Insert paste functionality    * Identify tcl scripts by shebang    * Add Ctrl+Insert copy functionality    * Add file extensions for newer Fortran standards    * Bump version to 0.51.0    * Add Alt+digit, Ctrl+PageUp and Ctrl+PageDown shortcuts to switch between tabs    * Added ability to Shift lines up/down (closes #183)    * Update contributors file    * Make copyright year parametric in localization files    * Add localization switch within Preferences    * Add russian in translation target    * add notepadqq_ru.ts    * Fix localization setting location    * Sort localization list by language name    * Update translations (#205)    Added new translations to notepadqq_de.ts.    notepadqq_hu.ts and notepadqq_ru.ts were just refreshed.    * Enable configure check for lrelease command (#204)    * Add full path, dir path and filename to clipboard options in tab context menu (#207)    * Add path and filename to clipboard options in tab context menu  * Update text of copy to clipboard actions    * Update Russian translation (#209)    * Update bannerindentationdetected.cpp (#210)    Make banner strings localizable    * Update notepadqq_hu.ts (#211)    * Remove strings marked vanished (#212)    These strings were modified by vpop see #207    * Hide Macro buttons (issue #101)    * Hide Macro menu    * Try fixing issue #201 by adding quotes to font-family    * Support for Qt 5.6 (fix #216) (#217)    * Added regex group reuse token functionality to Replace & Replace All (#224)    Replace & Replace All now mimiks Notepad++ replace functionality  for regular expressions with groups: [1-9] get replaced by groups  with the corresponding group in the regular expression.    **Example**    Test file contents:  hello C++ goodbye  hello JavaScript goodbye  hello CodeMirror goodbye    Regular expression in \"Find\" input box of the Search dialog:  (hell)os*([^s]*)s*goodbye    In \"Replace with\":  2 is 1    Output:  C++ is hell  JavaScript is hell  CodeMirror is hell    * Feature: User customizable keyboard shortcuts. (#225)    Support for User-customizable hotkeys (fixes #143)    * Polish localization    * Update CodeMirror, import new languages    * Support for Qt 5.7 (#233)    * Bump version to 0.52.0    * Fix font size    * v0.52.1    * Fix foldGutter not updating properly on when switching languages (fixes #200)    * UI Improvements regarding key handling.    * Style, compatibility and usability fixes    * Fix #240, fix pane width (#243)    * Fixes #240; Improved view pane handling.  * Changing patch of mouseReleaseEvent    * Fix Zenburn theme (closes #199) see #241    * Clean theme code in preferences dialog    * Update CodeMirror to v5.18.2    * Support for showing tabs, spaces and end of line symbols.    * Fix code style, indentation, and unneeded changes    * Docs for updateSymbols    * Remove tab image, update to newer show-invisibles.js    * Update submodule    * Update submodule    * Create CONTRIBUTING.md    * Update CONTRIBUTING.md    * Update CONTRIBUTING.md    * Allow users to configure a custom font (and size)    * Minor fixes to font feature    * Fixes for PR #245. Main change: Editors should not share state.    * Update submodule to fix space regression (#237)    * v0.53.0", "target": 0}
{"idx": 3672, "commit_message": "Replace nub . sort by a more efficient nubSort.", "target": 1}
{"idx": 2932, "commit_message": "Added ClustUtils dist/sim matrix flattening operations and methods to navigate flattened dist/sim matrices. Beginning to transition algos using these matrices to flattened, more space-efficient forms", "target": 0}
{"idx": 3683, "commit_message": "Layer ordering, copying, performance improvements  - Added layer up/down moving and copying - Boosted rendering performance a lot by only rendering live batches, everything else are cached layer textures - Allow no active layers - Added layer, batch instance cloning - Extended ui with some buttons - Refactored some code here and there", "target": 1}
{"idx": 2919, "commit_message": "ValueMapper: Rotate distinct node remapping algorithm  Rotate the algorithm for remapping distinct nodes in order to simplify how uniquing cycles get resolved.  This removes some of the recursion, and, most importantly, exposes all uniquing cycles at the top-level. Besides being a little more efficient -- temporary MDNodes won't live as long -- the clearer logic should help protect against bugs like those fixed in r243961 and r243976.  What are uniquing cycles?  Why do they present challenges when remapping metadata?      !0 = !{!1}     !1 = !{!0}  !0 and !1 form a simple uniquing cycle.  When remapping from one metadata graph to another, every uniquing cycle gets \"duplicated\" through a dance:      !0-temp = !{!1?}     ; map(!0): clone !0, VM[!0] = !0-temp     !1-temp = !{!0?}     ; ..map(!1): clone !1, VM[!1] = !1-temp     !1-temp = !{!0-temp} ; ..map(!1): remap !1's operands     !2      = !{!0-temp} ; ..map(!1): uniquify: !1-temp => !2     !0-temp = !{!2}      ; map(!0): remap !0's operands     !3      = !{!2}      ; map(!0): uniquify: !0-temp => !3      ; Result     !2 = !{!3}     !3 = !{!2}  (In the two \"uniquify\" steps above, the operands of !X-temp are compared to the operands of !X.  If they're the same, then !X-temp gets RAUW'ed to !X; if they're different, then !X-temp is promoted to a new unique node.  The latter case always hits in for uniquing cycles, so we duplicate all the nodes involved.)  Why is this a problem?  Uniquable Metadata nodes that have temporary node as transitive operands keep RAUW support until the temporary nodes get finalized.  With non-cycles, this happens automatically: when a uniquable node's count of unresolved operands drops to zero, it immediately sheds its own RAUW support (possibly triggering the same in any node that references it).  However, uniquing cycles create a reference cycle, and uniqued nodes that transitively reference a uniquing cycle are \"stuck\" in an unresolved state until someone calls `MDNode::resolveCycles()` on a node in the unresolved subgraph.  Distinct nodes should help here (and mostly do): since they aren't uniqued anywhere, they are guaranteed not to be RAUW'ed.  They effectively form a barrier between uniqued nodes, breaking some uniquing cycles, and shielding uniqued nodes from uniquing cycles.  Unfortunately, with this barrier in place, the unresolved subgraph(s) can be disjoint from the top-level node.  The mapping algorithm needs to find at least one representative from each disjoint subgraph.  But which nodes are *stuck*, and which will get resolved automatically?  And which nodes are in the unresolved subgraph?  The old logic was conservative.  This commit rotates the logic for distinct nodes, so that we have access to unresolved nodes at the top-level call to `llvm::MapMetadata()`. Each time we return to the top-level, we know that all temporaries have been RAUW'ed away.  Here, it's safe (and necessary) to call `resolveCycles()` immediately on unresolved operands.  This should also perform better than the old algorithm.  The recursion stack is shorter, temporary nodes don't live as long, and there are fewer tracking references to unresolved nodes.  As the debug info graph introduces more 'distinct' nodes, remapping should incrementally get cheaper and cheaper.  Aside from possible performance improvements (and reduced cruft in the `LLVMContext`), there should be no functionality change here.", "target": 1}
{"idx": 1413, "commit_message": "Extracted creation of conversation. Improved interface segregation.", "target": 0}
{"idx": 3363, "commit_message": "[URL]  * Make masks and layers inherit a common baseclass: KisNode. Create   code in krita/image to handle the new layer hierarchy. * Remove KisMetaRegistry * Remove the \"super\" typedefs * Fix bugs demonstrated by unittests * Add several unittests -- some show that we have some bugs still. * Considerably simplify the api of KisPaintDevice and Kisimage  * Add several more options for perfomance and tweak others to give   better performance by default * Sanitize the dirty setting of rects * Start working on extracting the prescaling and canvas preview update   spaghetti into a separate class. * Re-instate the fast-but-ugly nearest-neighbour scale option (doesn't   work yet, is part of the above)  Warning: this commit breaks some stuff, notably the adding of layers and masks. Painting, redisplay using QPainter and opengl and selections should be fine, without regressions. I am still working on the layer/mask issue and on the display thing, but apart from these two issues, Krita is reasonably stable again. There are two Umbrello diagrams in krita/doc that show the new layer design and the way the selection classes fit  together.   svn path=/trunk/koffice/; revision=701132", "target": 1}
{"idx": 62, "commit_message": "adding var features = Features.ToList() in MemoryProvider to avoid ' InvalidOperationException (Collection was modified; enumeration operation may not execute)'", "target": 0}
{"idx": 2219, "commit_message": "CO-3595 add pagination and change/move some call to improve performance (#1310)  * CO-3595 add pagination and change/move some call to improve performance    * CO-3595 fix issue mentionned in review    * Update website_compassion/controllers/my_account.py", "target": 1}
{"idx": 3835, "commit_message": "Made autocompletion slightly more efficient", "target": 1}
{"idx": 3017, "commit_message": "Input: Send events one packet at a time  On heavy event loads, such as a multitouch driver, the irqsoff latency can be as high as 250 us.  By accumulating a frame worth of data before passing it on, the latency can be dramatically reduced.  As a side effect, the special EV_SYN handling can be removed, since the frame is now atomic.  This patch adds the events() handler callback and uses it if it exists. The latency is improved by 50 us even without the callback.", "target": 1}
{"idx": 3554, "commit_message": "Another performance improvement.  method_missing is being called too much. Instead declared delegate methods for undestructive Array methods", "target": 1}
{"idx": 509, "commit_message": "logs: remove deprecated klog flags  This completes the deprecation of klog flags which are no longer supported. klog itself continues to support them, but Kubernetes components don't. This makes the command line interfaces simpler and reduces the attack surface because less functionality is exposed.  For example, kube-controller-manager now has:      Logs flags:        --log-flush-frequency duration                 Maximum number of seconds between log flushes (default 5s)       --log-json-info-buffer-size quantity                 [Alpha] In JSON format with split output streams, the info messages can be buffered for a while to increase performance. The default value of zero                 bytes disables buffering. The size can be specified as number of bytes (512), multiples of 1000 (1K), multiples of 1024 (2Ki), or powers of those (3M,                 4G, 5Mi, 6Gi). Enable the LoggingAlphaOptions feature gate to use this.       --log-json-split-stream                 [Alpha] In JSON format, write error messages to stderr and info messages to stdout. The default is to write a single stream to stdout. Enable the                 LoggingAlphaOptions feature gate to use this.       --logging-format string                 Sets the log format. Permitted formats: \"json\" (gated by LoggingBetaOptions), \"text\". (default \"text\")   -v, --v Level                 number for the log level verbosity       --vmodule pattern=N,...                 comma-separated list of pattern=N settings for file-filtered logging (only works for text log format)      Misc flags:        --kubeconfig string                 Path to kubeconfig file with authorization and master location information.       --master string                 The address of the Kubernetes API server (overrides any value in kubeconfig).      Global flags:    -h, --help                 help for kube-controller-manager       --version version[=true]                 Print version information and quit  For details see [URL]/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components", "target": 0}
{"idx": 4104, "commit_message": "[PATCH] reverted commit 76d5bddd5c3dfdef76beaab8222231624eb75e89.\n Split ga_acc in moints2x_trf2K in smaller ga_acc on MPI-PR since gives large\n performance improvement on NERSC Cori", "target": 1}
{"idx": 1115, "commit_message": "ninja improvements, bugfixes", "target": 0}
{"idx": 1213, "commit_message": "Make code a bit more readable in networking.go", "target": 0}
{"idx": 3492, "commit_message": "Improve the performance of retrieving data", "target": 1}
{"idx": 4007, "commit_message": "[PATCH] Added single-accuracy SIMD double math functions\n\nApart from double SIMD variables typically being\nhalf the width of single, the math functions are\nconsiderably more expensive due to higher-order\npolynomials, which can drop the throughput to 25%\nof single. In some cases we do not need the full\ndouble precision in SIMD operations, so these\nnew math functions use double precision\nSIMD variables but only target single precision\naccuracy, which can improve performance twofold.\nThe patch also makes the target precision in\nsingle and double SIMD an advanced CMake variable,\nand the unit test tolerance is set based on these\nvariables. This can be used (decided by the user)\nfor a few platforms where the rsqrt/inv table\nlookups provide one bit too little to get by\nwith a single N-R iteration based on our default\ntarget accuracy of 22 bits.\n\nChange-Id: Id4b1c7800e16cb0eb3d564e89a368b4db6eede3e", "target": 1}
{"idx": 3319, "commit_message": "GEODE-3948 Improve CQ performance under flaky network conditions  Adding new pool setting to XSD so it can be configured in cache.xml  This closes #1520", "target": 1}
{"idx": 1349, "commit_message": "Merge pull request #42 from allenai/gpu  gpu enabled swig builds  Former-commit-id: 071f98228acc7860cca57d7e25be274a29a24d44", "target": 0}
{"idx": 2711, "commit_message": "Make isAvailable static. Not exactly what I usually call beautiful, but it gets the job done, and way more efficiently.  svn path=/trunk/KDE/kdebase/workspace/; revision=1204505", "target": 1}
{"idx": 2843, "commit_message": "Move 50 moves counter to initiative.  simplify the usage of the 50 moves counter, moving it frome the scale factor to initiative.  This patch was inspired by recent games where a blocked or semi-blocked position was 'blundered', by moving a pawn, into a lost endgame. This patch improves this situation, finding a more robust move more often.  for example (1s searches with many threads): ``` FEN 8/p3kp2/Pp2p3/1n2PpP1/5P2/1Kp5/8/R7 b - - 68 143  master:       6 bestmove b5c7       6 bestmove e7e8      12 bestmove e7d8     176 bestmove e7d7 patch:       3 bestmove b5c7       5 bestmove e7d8     192 bestmove e7d7 ```  fixes [URL]/official-stockfish/Stockfish/issues/2620  the patch also tests well  passed STC LLR: 2.94 (-2.94,2.94) {-1.50,0.50} Total: 50168 W: 9508 L: 9392 D: 31268 Ptnml(0-2): 818, 5873, 11616, 5929, 848 [URL]/tests/view/5ebb07287dd5693aad4e680b  passed LTC LLR: 2.93 (-2.94,2.94) {-1.50,0.50} Total: 7520 W: 981 L: 870 D: 5669 Ptnml(0-2): 49, 647, 2256, 760, 48 [URL]/tests/view/5ebbff747dd5693aad4e6858  closes [URL]/official-stockfish/Stockfish/pull/2666  Bench: 4395562", "target": 1}
{"idx": 3699, "commit_message": "perf(demo): Disable $compileProvider debug info  This disables debug info from $compileProvider to improve performance. This option is only available with angularJS >= 1.3.", "target": 1}
{"idx": 3953, "commit_message": "Move performance/debugging tips down", "target": 0}
{"idx": 3264, "commit_message": "sched: kill unnecessary divisions on fast path  The max_possible_efficiency and CPU's efficiency are fixed values which are determined at cluster allocation time.  Avoid division on the fast by using precomputed scale factor.  Also update_cpu_busy_time() doesn't need to know how many full windows have elapsed.  Thus replace unneeded division with simple comparison.", "target": 1}
{"idx": 2185, "commit_message": "cvector: disable binder on destruction as it seems to create a performance bottleneck.", "target": 1}
{"idx": 900, "commit_message": "improve random_select_peer() (prevent select self or SP) remove the list when device offline", "target": 0}
{"idx": 2870, "commit_message": "Rewrite of toHex  This is probably a meaningless optimization,  but tests on my laptop suggest the new toHex is 25-33% faster, and allocates a similar amount of memory.", "target": 1}
{"idx": 3268, "commit_message": "scmutil: make join cheaper  Combined with a few followup patches, this contributes to improving stream_out performance by 10%.", "target": 1}
{"idx": 850, "commit_message": "Optimizing globe view (work in progress)", "target": 1}
{"idx": 367, "commit_message": "Revert 143590 - Drop frontbuffers with ui-use-gpu-process, synchronized with browser, decoupled from backbuffer drop.  For failures we suspect caused by this patch see:     [URL]/p/chromium.chromiumos/builders/ChromiumOS%20%28x86%29/builds/6243    [URL]/p/chromium.chromiumos/builders/ChromiumOS%20%28amd64%29/builds/2706  - - - - - - - - -  On Aura, every time a tab is backgrounded, RenderWidgetHostViewAura will reset its handle to the front surface.  If that tab is foregrounded again, that front surface will not be used until synchronizing with the gpu process to make sure that surface is still available.  By doing this, the gpu process knows when it is safe to discard the front surface.  RWHVA sends a FrontSurfaceIsProtected(bool, int) message to the gpu process to keep it informed about front surface protection.  The int is a state-of-the-world identifier to protect from ABA issues.  RWHVA delays sending FrontSurfaceIsProtected(false) until after the current surface is certain to not be in use, namely after the compositor finishes the current frame and the browser thumbnailer is complete.   BUG=112842 TEST=Manual   Committed: [URL]/viewvc/chrome?view=rev&revision=142408  Committed: [URL]/viewvc/chrome?view=rev&revision=142541  Review URL: [URL]/10052018  [URL] Review URL: [URL]/10658007", "target": 0}
{"idx": 2815, "commit_message": "git-am: print fair error message when format detection fails  Avoid git ending with this message: \t\"Patch format  is not supported.\"  With improved error message in the format detection failure case by Giuseppe Bilotta.", "target": 0}
{"idx": 2155, "commit_message": "bluetooth: Replace buttons in device table with action links.  When a large number of rows are present in the device table, scrolling performance drops considerably. This is due to the table recalculating its size due to button elements being in each row of the table.  Replaces buttons in device table with action links to speed up rendering of the device table.  BUG=651282 CQ_INCLUDE_TRYBOTS=master.tryserver.chromium.linux:closure_compilation  Review-Url: [URL]/2558493004", "target": 1}
{"idx": 775, "commit_message": "improved code", "target": 0}
{"idx": 3853, "commit_message": "mac80211: improve rate control performance", "target": 1}
{"idx": 2866, "commit_message": "rwsem-spinlock: Implement writer lock-stealing for better scalability  We (Linux Kernel Performance project) found a regression introduced by commit:  mm/rmap: Convert the struct anon_vma::mutex to an rwsem  which converted all anon_vma::mutex locks rwsem write locks.  The semantics are the same, but the behavioral difference is quite huge in some cases. After investigating it we found the root cause: mutexes support lock stealing while rwsems don't.  Here is the link for the detailed regression report:    [URL]/lkml/2013/1/29/84  Ingo suggested adding write lock stealing to rwsems:      \"I think we should allow lock-steal between rwsem writers - that      will not hurt fairness as most rwsem fairness concerns relate to      reader vs. writer fairness\"  And here is the rwsem-spinlock version.  With this patch, we got a double performance increase in one test box with following aim7 workfile:      FILESIZE: 1M     POOLSIZE: 10M     10 fork_test   /usr/bin/time output w/o patch                       /usr/bin/time_output with patch  -- Percent of CPU this job got: 369%                 Percent of CPU this job got: 537%  Voluntary context switches: 640595016                Voluntary context switches: 157915561  We got a 45% increase in CPU usage and saved about 3/4 voluntary context switches.  Reported-by: LKP project [URL]> Suggested-by: Ingo Molnar [URL]>", "target": 1}
{"idx": 2697, "commit_message": "Rolling 8 dependencies (#26)  Roll third_party/effcee/ 6527fb254..cd25ec17e (2 commits)    [URL]/google/effcee/compare/6527fb25482e...cd25ec17e938    $ git log 6527fb254..cd25ec17e --date=short --no-merges --format='%ad %ae %s'  2019-09-18 dneto Start v2019.1-dev  2019-09-18 dneto Finalize v2019.0    Roll third_party/glm/ 4ff530b2a..ea678faff (2 commits)    [URL]/g-truc/glm/compare/4ff530b2a5af...ea678faff934    $ git log 4ff530b2a..ea678faff --date=short --no-merges --format='%ad %ae %s'  2019-09-14 sma-github bugfix intersection ray/plane, added related tests  2019-09-11 UniQP Let test return the number of errors    Roll third_party/glslang/ a959deb00..834ee546f (1 commit)    [URL]/KhronosGroup/glslang/compare/a959deb00750...834ee546f93d    $ git log a959deb00..834ee546f --date=short --no-merges --format='%ad %ae %s'  2019-10-17 jbolz Only apply volatile semantics to atomics when using Vulkan Memory Model    Roll third_party/googletest/ 33a0d4f6d..f966ed158 (43 commits)    [URL]/google/googletest/compare/33a0d4f6d76a...f966ed158177    $ git log 33a0d4f6d..f966ed158 --date=short --no-merges --format='%ad %ae %s'  2019-10-18 misterg Googletest export  2019-10-17 absl-team Googletest export  2019-10-17 absl-team Googletest export  2019-10-16 absl-team Googletest export  2019-10-09 robert Add more override keywords  2019-10-11 misterg Googletest export  2019-10-10 absl-team Googletest export  2019-10-10 absl-team Googletest export  2019-10-10 chrisjohnsonmail chore:  update version  2019-10-10 joshdcannon Made noexcept condition more exciting  2019-10-09 absl-team Googletest export  2019-10-09 zeb Mention Cornichon as a related open source project  2019-10-07 joshdcannon Use declval in noexcept expression  2019-10-07 joshdcannon Switch to free function to avoid GCC bug  2019-10-07 joshdcannon Avoid comma operator  2019-10-07 joshdcannon Fix spacing  2019-10-07 joshdcannon Use the verbatim noexcept spec in MOCKED_METHOD  2019-10-07 joshdcannon Use FormatFileLocation for streaming file and line  2019-10-05 soap Add documentation for pkg-config in cross-compilation settings  2019-10-05 soap Revert \"Use pcfiledir for prefix in pkgconfig file\"  2019-10-03 misterg Googletest export  2019-10-03 absl-team Googletest export  2019-10-02 absl-team Googletest export  2019-09-29 misterg Googletest export  2019-10-01 ant35rookie Fix typo in documents  2019-09-29 misterg Googletest export  2019-09-27 misterg Googletest export  2019-09-25 absl-team Googletest export  2019-09-25 absl-team Googletest export  2019-09-24 absl-team Googletest export  2019-09-19 absl-team Googletest export  2019-09-27 gennadiycivil Bump llvm version to 4 so brew can work again  2019-08-16 pbarker Add many missing override keywords  2019-08-22 krystian.kuzniarek mention the existing support for wide strings in string matchers  2019-09-16 krystian.kuzniarek square away the stuff that hasn't been merged in a manual review  2019-09-07 krystian.kuzniarek square away the stuff that hasn't been merged in a manual review  2019-09-16 krystian.kuzniarek Googletest export  2019-09-13 misterg Googletest export  2019-08-22 krystian.kuzniarek change usings  2019-09-12 hgsilverman Googletest export  2019-09-11 absl-team Googletest export  2019-09-10 krystian.kuzniarek remove GTEST_HAS_STD_STRING  2019-08-12 krystian.kuzniarek restore mistakenly removed iffs in their explicit form    Roll third_party/re2/ 5bd613749..ab12219ba (16 commits)    [URL]/google/re2/compare/5bd613749fd5...ab12219ba56a    $ git log 5bd613749..ab12219ba --date=short --no-merges --format='%ad %ae %s'  2019-10-13 junyer Fix the regexp_benchmark build with GNU make.  2019-10-11 junyer Oops, wrap a couple of lines.  2019-10-11 junyer Read flags using the GetFlag() style.  2019-10-11 junyer Make flags use the DEFINE_FLAG() style.  2019-10-11 junyer Remove a condition from exhaustive1_test.cc that is no longer needed.  2019-10-11 junyer Move util/flags.h into the testing target.  2019-10-11 junyer Don't declare testing::TempDir() in dump.cc itself.  2019-10-11 junyer Split out the fake testing::MallocCounter into its own file.  2019-10-11 junyer Remove the fake test_tmpdir flag in favour of testing::TempDir().  2019-10-10 junyer Remove the comment on NumCPUs().  2019-10-10 junyer Call .range(0) explicitly rather than just .range().  2019-10-10 junyer Move NumCPUs() into regexp_benchmark.cc.  2019-10-10 junyer Migrate to the new benchmark API.  2019-10-10 junyer Implement the new benchmark API as a layer over the old benchmark API.  2019-10-09 junyer Tidy up the ersatz benchmark library.  2019-10-07 junyer Move pod_array.h and sparse_{array,set}.h from util/ to re2/.    Roll third_party/shaderc/ 50d890196..f28d5287c (3 commits)    [URL]/google/shaderc/compare/50d89019658e...f28d5287c68b    $ git log 50d890196..f28d5287c --date=short --no-merges --format='%ad %ae %s'  2019-10-18 dneto Remove utils/build.py (#841)  2019-10-17 9856269+sarahM0 spvc parser for a trivial shader (#839)  2019-10-17 rharrison Rolling 5 dependencies and update known_failures & known_invalids (#840)    Roll third_party/spirv-cross/ e5d3a6655..a92668bc1 (8 commits)    [URL]/KhronosGroup/SPIRV-Cross/compare/e5d3a6655e13...a92668bc118a    $ git log e5d3a6655..a92668bc1 --date=short --no-merges --format='%ad %ae %s'  2019-10-17 post Fix OpVectorExtractDynamic with spec constant op index.  2019-10-16 post Travis: Update PATH for Python3 on Windows.  2019-10-14 post MSL: Add opt-in support for huge IABs.  2019-10-14 post HLSL: Fix unrolled S/G LE/LT/GE/GT opcodes.  2019-10-14 post GLSL: Deal correctly with bitwidth on integer compares.  2019-10-14 post HLSL: Partially implement Unordered compare.  2019-10-14 post GLSL: Support unordered floating point compare.  2019-10-11 post MSL: Fix regression with OpCompositeConstruct from std140 float[].    Roll third_party/spirv-tools/ 964dc52df..6a9be627c (10 commits)    [URL]/KhronosGroup/SPIRV-Tools/compare/964dc52df539...6a9be627c760    $ git log 964dc52df..6a9be627c --date=short --no-merges --format='%ad %ae %s'  2019-10-18 stevenperron Keep NOPs when comparing with original binary (#2931)  2019-10-18 alanbaker Check that derivatives operate on 32-bit values (#2983)  2019-10-17 rharrison Check text->str before destroying (#2981)  2019-10-17 kubak Disallow use of OpCompositeExtract/OpCompositeInsert with no indices (#2980)  2019-10-17 rharrison Add fuzzer for spirv-dis call path (#2977)  2019-10-17 rharrison Check binary->code existence before destroying (#2979)  2019-10-17 akb825 Improved CMake install step. (#2963)  2019-10-16 kubak Support constant-folding UConvert and SConvert (#2960)  2019-10-16 rharrison Add fuzzer for spirv-as call path (#2976)  2019-10-15 afdx spirv-fuzz: Refactor 'copy object' and 'construct composite' transformations (#2966)    Created with:    roll-dep third_party/effcee third_party/glm third_party/glslang third_party/googletest third_party/re2 third_party/shaderc third_party/spirv-cross third_party/spirv-headers third_party/spirv-tools third_party/vulkan-docs", "target": 0}
{"idx": 3425, "commit_message": "Transcribed Luminary 116 IMU PERFORMANCE TESTS 4, proofed its comment text using 3-way diff vs Luminary 99 and 131, and propagated fixes to other Luminary versions as appropriate, including a fix to Luminary 131 P20-P25.", "target": 0}
{"idx": 2269, "commit_message": "rts/NonMovingSweep: Fix locking of new mutable list allocation  Previously we used allocBlockOnNode_sync in nonmovingSweepMutLists despite the fact that we aren't in the GC and therefore the allocation spinlock isn't in use. This meant that sweep would end up spinning until the next minor GC, when the SM lock was moved away from the SM_MUTEX to the spinlock. This isn't a correctness issue but it sure isn't good for performance.  Found thanks for Ward.  Fixes #17539.", "target": 1}
{"idx": 2479, "commit_message": "Add SelectorDepth linter  Add a linter which checks for selectors with large depths of applicability. This will help catch CSS that is tightly coupled to HTML structure and improve the performance of CSS by encouraging more efficient selectors.  Closes #48", "target": 0}
{"idx": 3988, "commit_message": "Improve performance of qof_query_invert().  Prepend terms and reverse once at the end instead of \"reverse, prepend, reverse\" for each term.", "target": 1}
{"idx": 3023, "commit_message": "Bug fixes in arith_projection.c + more tests of arith_projection.c.  In make_aproj_constraint: can't use copy_monarray since this function does not initialize the coefficients in q.  In aproj_add_arith_bineq: t1 or t2 could be a rational constant (missing casese).  In aproj_add_constraint: now accepts the case where c is true_term. Just ignore the constraint in this case.", "target": 0}
{"idx": 2951, "commit_message": "Refactor DispatchQueue to use an intrusive list instead of an std::list  An intrusive linked list, in this case, is a much better choice.  Heap allocations for each entry in the collection are unavoidably necessary because entries have a variable size, which means a linked list is an improvement over `std::list`.  If necessary, a next step could be to use a journal-based arena allocator in order to keep links in the list sequential with respect to each other.", "target": 0}
{"idx": 3067, "commit_message": "inline some Bitmap functions to improve performance", "target": 1}
{"idx": 24, "commit_message": "drm/amd/amdgpu: expose fan rpm though hwmon  Only for cards that are supported by powerplay.", "target": 0}
{"idx": 202, "commit_message": "tests: improve capture of stdout/stderr  Use a single pipe for both, instead of a temporary file.", "target": 0}
{"idx": 992, "commit_message": "[GEOT-6537] Tests for optimized 'in' encoding fail in GeoPKG", "target": 0}
{"idx": 2425, "commit_message": "Avoid allocating temporary ranges in connection with text and character iterators.  30% performance improvement on DOM/textarea-edit on the oilpan build. 2% performance improvement on DOM/textarea-edit on the non-oilpan build.  [URL] BUG=388681  Review URL: [URL]/544083002", "target": 1}
{"idx": 2683, "commit_message": "Improved performance of utilities.next_unused_name_in_group.", "target": 1}
{"idx": 1691, "commit_message": "UefiCpuPkg: Add the missing module uni for CpuS3DataDxe  Contributed-under: TianoCore Contribution Agreement 1.0", "target": 0}
{"idx": 873, "commit_message": "Merge \"defconfig: msm8655-sr: Enable DRM, KGSL & LatencyTOP\" into android-msm-2.6.32", "target": 0}
{"idx": 2977, "commit_message": "Support for CRAM reading/loading, SWMODE support.  Rough debugger UI for viewing / disassembling microcode in ROM1, RAM0 banks (ugly).  Minor performance improvements.", "target": 1}
{"idx": 3948, "commit_message": "Improve performance of note pane animation  Summary: Widen the pane a little, to 40% of the screen from 33%. Also darken the click capture area, more like the mockups.  Test Plan: - Go to a document - Open the note pane - It should be almost buttery smooth - Rest of the page should darken  Differential Revision: [URL]/D169", "target": 1}
{"idx": 4053, "commit_message": "[PATCH] 2d convolve performance improvements\n\nchanged the shared memory loading access pattern in 2d convolve\nkernel for cuda and opencl backends", "target": 1}
{"idx": 3557, "commit_message": "Tidied up some utils functions and added more efficient logger. Removed lots of different cout statements.", "target": 0}
{"idx": 3574, "commit_message": "test(protractor): improved performance on Windows OS", "target": 1}
{"idx": 2863, "commit_message": "Performance improvements for string decoding  - introduce a new faststring class, which probably should be   renamed something like 'ResizableBuffer'. - use memcpy_inlined in a few places where it was a bottleneck - initialize the arena based on data block size to avoid having   to allocate lots of small arena entries", "target": 1}
{"idx": 363, "commit_message": "feat(styles): improve readability layout", "target": 0}
{"idx": 3791, "commit_message": "AP_MSP: make MSP packing smaller and more efficient  this changes two MSP items (GPS and home pos) to use packed structures insteaf of individual sbuf writes. This makes for faster and smaller code", "target": 1}
{"idx": 2599, "commit_message": "Made vectors more efficient.", "target": 1}
{"idx": 888, "commit_message": "Fix issue where exclusive allocations wouldn't lay tasks out correctly with CR_PACK_NODES.  Really do commit d388dd67fb a different way to get the same info and be able to lay out tasks correctly when --hint=nomultithread.  tests on a 4 core 8 thread system are srun -n6 --hint=nomultithread --exclusive whereami | sort -h srun: cpu count 6    0 snowflake0 - MASK:0x1    1 snowflake0 - MASK:0x2    2 snowflake0 - MASK:0x4    3 snowflake0 - MASK:0x8    4 snowflake1 - MASK:0x1    5 snowflake1 - MASK:0x2  and  srun -n10 -N5 --hint=nomultithread --exclusive whereami | sort -h srun: cpu count 10    0 snowflake0 - MASK:0x1    1 snowflake0 - MASK:0x2    2 snowflake0 - MASK:0x4    3 snowflake0 - MASK:0x8    4 snowflake1 - MASK:0x1    5 snowflake1 - MASK:0x2    6 snowflake1 - MASK:0x4    7 snowflake2 - MASK:0x1    8 snowflake3 - MASK:0x1    9 snowflake4 - MASK:0x1", "target": 0}
{"idx": 1403, "commit_message": "CHE-10769: improve loader.html page (#10820)  * CHE-10769: improve loader.html page", "target": 0}
{"idx": 3377, "commit_message": "REG: fix SiTCP downstream performance, fixes #123", "target": 0}
{"idx": 3615, "commit_message": "Squashed 'spacedrive/renderpipeline/' changes from d832cd9..783ba39  783ba39 Added Water FFT 32387e0 Big Update, new GI Approach, fixed Shadow flickering when moving slider, renamed tasks to start with \"RP_\", various smaller fixes 3935f2a Updated readme b971d58 updated readme dc509af Fixed bug in voxel displaying 639d401 Fixed voxelizer 7f580b5 - Added editor base // - Improved voxelizer, made ready for voxel based cone tracing 1c82c60 Various changes, added roaming ralph sample 7afe8bc Improved GI c2ad69d Fixed bug in voxelizer, now works much better 2c6df76 Many changes to voxelizer, now stores normals and can handle invalid geometry better 7ec1cfc Updated voxelizer readme b09fd47 Added Voxelizer Gui 5a13d58 Added comment to sample d96603e - Added option to disable scattering - Added pipeline sample - Smaller changes f8139d5 Improved voxelizer c066ac9 Various fixes 2af8177 Added more comments to Code/GUI and cleaned up code (PEP8 compatible) c0ea0f3 Added shader caching b938127 Added more Readmes 3278f91 - Addex GPU Voxelizer (Todo: GI for voxelized meshes) d2df256 - Greatly Improved GI (Quality & Performance) - Added option to always update shadows - Added SystemAnalyzer + Check if panda version is out of date - Fixed Combiner pass when rendering with subpixel shifts - Added option to debug GI voxels in GlobalIllumination.py - 6232d2d Smaller fixes  git-subtree-dir: spacedrive/renderpipeline git-subtree-split: 783ba3971e281dbc2723e8ff453f5e211a52c1e5", "target": 0}
{"idx": 327, "commit_message": "Fixed all partial updates on an entry via entry-processor should be reflected to map-store when in memory format is OBJECT", "target": 0}
{"idx": 1432, "commit_message": "Improve Javadocs", "target": 0}
{"idx": 395, "commit_message": "Minor change to the criterion - for some reason ModuleCriterion doesn't exist on ebgpu2 and ebgpu3", "target": 0}
{"idx": 1343, "commit_message": "Add e2e test for raw headers to that we can delete flaky DevToolsTest.TestNetworkRawHeadersText test  Bug: 1288549", "target": 0}
{"idx": 3547, "commit_message": "Merged the work of Jeff into master. Improved its work, read more to get details.  - Moved the date_out_shipping and date_in_shipping from rent_rtz to rent module. - Fields 'total_buy_price' and 'total_sell_price' are now computed inside get_total and stored to improve performance. - Added an on_change event on duration and duration_unity to compute the date_in_shipping on the fly. - Updated French translation", "target": 1}
{"idx": 3934, "commit_message": "Improved performance of Pep8 parser.", "target": 1}
{"idx": 181, "commit_message": "ExperimentBundle.en.yml translations deleted, base.html.twig dynamic lang", "target": 0}
{"idx": 3065, "commit_message": "Change raspbian/stretch default sfs compression to gzip  Using gzip compressed sfs files gives much better performance than xz compressed sfs files with gyro's new overlayfs init. [URL]/puppy/viewtopic.php?p=961068#961068", "target": 1}
{"idx": 1995, "commit_message": "Revert \"Improve load representation in CPUFreq governor\"  This reverts commit c718dac7f6f88a346552d196b4c803939888c6bd.", "target": 0}
{"idx": 1615, "commit_message": "improved demo + another mqtt unique name fix  now converting the hex value of the mac address. improved demo with better comments and outlining", "target": 0}
{"idx": 3747, "commit_message": "Performance improvements (#287)  * Perf improvements. Limit rerender on keystrokes    * Spread settings props, make dropdowns and carbon pure    * Remove last TODO    * Pass state into value of titleBar input    * Clean up", "target": 1}
{"idx": 3153, "commit_message": "IMA: use rbtree instead of radix tree for inode information cache  The IMA code needs to store the number of tasks which have an open fd granting permission to write a file even when IMA is not in use.  It needs this information in order to be enabled at a later point in time without losing it's integrity garantees.  At the moment that means we store a little bit of data about every inode in a cache.  We use a radix tree key'd on the inode's memory address. Dave Chinner pointed out that a radix tree is a terrible data structure for such a sparse key space.  This patch switches to using an rbtree which should be more efficient.  Bug report from Dave:   \"I just noticed that slabtop was reporting an awfully high usage of   radix tree nodes:     OBJS ACTIVE  USE OBJ SIZE  SLABS OBJ/SLAB CACHE SIZE NAME   4200331 2778082  66%    0.55K 144839       29   2317424K radix_tree_node   2321500 2060290  88%    1.00K  72581       32   2322592K xfs_inode   2235648 2069791  92%    0.12K  69864       32    279456K iint_cache    That is, 2.7M radix tree nodes are allocated, and the cache itself is   consuming 2.3GB of RAM.  I know that the XFS inodei caches are indexed   by radix tree node, but for 2 million cached inodes that would mean a   density of 1 inode per radix tree node, which for a system with 16M   inodes in the filsystems is an impossibly low density.  The worst I've   seen in a production system like [URL] is about 20-25% density,   which would mean about 150-200k radix tree nodes for that many inodes.   So it's not the inode cache.    So I looked up what the iint_cache was.  It appears to used for   storing per-inode IMA information, and uses a radix tree for indexing.   It uses the *address* of the struct inode as the indexing key.  That   means the key space is extremely sparse - for XFS the struct inode   addresses are approximately 1000 bytes apart, which means the closest   the radix tree index keys get is ~1000.  Which means that there is a   single entry per radix tree leaf node, so the radix tree is using   roughly 550 bytes for every 120byte structure being cached.  For the   above example, it's probably wasting close to 1GB of RAM....\"  Reported-by: Dave Chinner [URL]>", "target": 1}
{"idx": 4026, "commit_message": "[PATCH] more efficient live variables in SX virtual machine", "target": 1}
{"idx": 4095, "commit_message": "[PATCH] thermophysicalModels: Added caching of Cp and Cv for\n efficiency\n\nIn multi-specie systems the calculation of Cp and Cv is relatively expensive due\nto the cost of mixing the coefficients of the specie thermo model, e.g. JANAF,\nand it is significantly more efficient if these are calculated at the same time\nas the rest of the thermo-physical properties following the energy solution.\n\nAlso the need for CpByCpv is also avoided by the specie thermo providing the\nenergy type in the form of a boolean 'enthalpy()' function which returns true if\nthe energy type is an enthalpy form.", "target": 1}
{"idx": 2728, "commit_message": "Fix mapbox-gl rendering when panning the map  After this obvious fix, the lib was actually broken:  [URL]/mapbox/mapbox-gl-leaflet/commit/b0eb35e87317f754211f6af43a0f3a7bbcc87ee9    See my comments, the resize() call that was happening every time called _move() which invalidates the styles and called render.  Then update() would do basically nothing.  With the fix, if the viewport wasn't resized, calling gl.render() resulted in nothing because styles were not invalidated so mapbox-gl was doing nothing.  Instead, this PR calls update() which invalidates the style and gets the render loop working when panning / zooming.    I am not sure if it enhances performances of the map when dragging, which still lags behind but it fixes the panning issues    Tested in IE11 with latest mapbox-gl 0.7.0    Fabien", "target": 0}
{"idx": 1769, "commit_message": "Fixing flow_direction_mfd algorithm after base level passing bug fixed", "target": 0}
{"idx": 447, "commit_message": "reverted from ConcurrentHashMap back to HashMap. Obviously, CCHM carries some overhead, and 'headers' is not accessed concurrently", "target": 0}
{"idx": 3649, "commit_message": "core: Use \"Integer.compare\" in \"VdsCpuUsageComparator\"  This is needed in order to avoid the following findbugs error:    Boxing a primitive to compare    A boxed primitive is created just to call compareTo method. It's more   efficient to use static compare method (for double and float since   Java 1.4, for other primitive types since Java 1.7) which works on   primitives directly.    Bug kind and pattern: Bx - DM_BOXED_PRIMITIVE_FOR_COMPARE", "target": 1}
{"idx": 2423, "commit_message": "panel - rendering generic rows more efficiently", "target": 1}
{"idx": 1874, "commit_message": "* select.cc (cygwin_select): Make degenerate case cancelable. \t(select_stuff::destroy): New inline method to delete memory taken \tby select_stuff. \t(select_stuff::~select_stuff): Call destroy. \t(select_stuff::wait): Add case to allow canceling select. \t* select.h (select_stuff::destroy): Declare. \t* thread.cc: Mark poll, pselect and poll as cancelable.", "target": 0}
{"idx": 113, "commit_message": "Memory structure for easier further handling from stage one output data and for tagging.", "target": 0}
{"idx": 2985, "commit_message": "Introduce small writing buffer to improve performance  Reduce the amount of writing operations called on the given writer. This improves writing performance even when writing to a StringWriter. As an effect, it also speeds up toString().  The default size of 128 chars turned out to be a good compromise. It hardly affects the performance for smaller documents, but sigificantly speeds up writing bigger ones.", "target": 1}
{"idx": 3304, "commit_message": "fixes for many failing sql copy into statements (hopefully this didn't break the performance improvements)", "target": 0}
{"idx": 3293, "commit_message": "vfs: use __getname/__putname for getcwd() system call  It's a pathname.  It should use the pathname allocators and deallocators, and PATH_MAX instead of PAGE_SIZE.  Never mind that the two are commonly the same.  With this, the allocations scale up nicely too, and I can do getcwd() system calls at a rate of about 300M/s, with no lock contention anywhere.  Of course, nobody sane does that, especially since getcwd() is traditionally a very slow operation in Unix.  But this was also the simplest way to benchmark the prepend_path() improvements by Waiman, and once I saw the profiles I couldn't leave it well enough alone.  But apart from being an performance improvement (from using per-cpu slab allocators instead of the raw page allocator), it's actually a valid and real cleanup.", "target": 1}
{"idx": 2302, "commit_message": "ARM: kernel: implement stack pointer save array through MPIDR hashing  Current implementation of cpu_{suspend}/cpu_{resume} relies on the MPIDR to index the array of pointers where the context is saved and restored. The current approach works as long as the MPIDR can be considered a linear index, so that the pointers array can simply be dereferenced by using the MPIDR[7:0] value. On ARM multi-cluster systems, where the MPIDR may not be a linear index, to properly dereference the stack pointer array, a mapping function should be applied to it so that it can be used for arrays look-ups.  This patch adds code in the cpu_{suspend}/cpu_{resume} implementation that relies on shifting and ORing hashing method to map a MPIDR value to a set of buckets precomputed at boot to have a collision free mapping from MPIDR to context pointers.  The hashing algorithm must be simple, fast, and implementable with few instructions since in the cpu_resume path the mapping is carried out with the MMU off and the I-cache off, hence code and data are fetched from DRAM with no-caching available. Simplicity is counterbalanced with a little increase of memory (allocated dynamically) for stack pointers buckets, that should be anyway fairly limited on most systems.  Memory for context pointers is allocated in a early_initcall with size precomputed and stashed previously in kernel data structures. Memory for context pointers is allocated through kmalloc; this guarantees contiguous physical addresses for the allocated memory which is fundamental to the correct functioning of the resume mechanism that relies on the context pointer array to be a chunk of contiguous physical memory. Virtual to physical address conversion for the context pointer array base is carried out at boot to avoid fiddling with virt_to_phys conversions in the cpu_resume path which is quite fragile and should be optimized to execute as few instructions as possible. Virtual and physical context pointer base array addresses are stashed in a struct that is accessible from assembly using values generated through the asm-offsets.c mechanism.  Cc: Will Deacon [URL]> Cc: Catalin Marinas [URL]> Cc: Russell King [URL].uk> Cc: Colin Cross [URL]> Cc: Santosh Shilimkar [URL]> Cc: Daniel Lezcano [URL]> Cc: Amit Kucheria [URL]>", "target": 0}
{"idx": 1184, "commit_message": "selinux: correct locking in selinux_netlbl_socket_connect)  commit 42d64e1add3a1ce8a787116036163b8724362145 upstream.  The SELinux/NetLabel glue code has a locking bug that affects systems with NetLabel enabled, see the kernel error message below.  This patch corrects this problem by converting the bottom half socket lock to a more conventional, and correct for this call-path, lock_sock() call.   ===============================  [ INFO: suspicious RCU usage. ]  3.11.0-rc3+ #19 Not tainted  -------------------------------  net/ipv4/cipso_ipv4.c:1928 suspicious rcu_dereference_protected() usage!   other info that might help us debug this:   rcu_scheduler_active = 1, debug_locks = 0  2 locks held by ping/731:   #0:  (slock-AF_INET/1){+.-...}, at: [...] selinux_netlbl_socket_connect   #1:  (rcu_read_lock){.+.+..}, at: [<...>] netlbl_conn_setattr   stack backtrace:  CPU: 1 PID: 731 Comm: ping Not tainted 3.11.0-rc3+ #19  Hardware name: Bochs Bochs, BIOS Bochs 01/01/2011   0000000000000001 ffff88006f659d28 ffffffff81726b6a ffff88003732c500   ffff88006f659d58 ffffffff810e4457 ffff88006b845a00 0000000000000000   000000000000000c ffff880075aa2f50 ffff88006f659d90 ffffffff8169bec7  Call Trace:   [<ffffffff81726b6a>] dump_stack+0x54/0x74   [<ffffffff810e4457>] lockdep_rcu_suspicious+0xe7/0x120   [<ffffffff8169bec7>] cipso_v4_sock_setattr+0x187/0x1a0   [<ffffffff8170f317>] netlbl_conn_setattr+0x187/0x190   [<ffffffff8170f195>] ? netlbl_conn_setattr+0x5/0x190   [<ffffffff8131ac9e>] selinux_netlbl_socket_connect+0xae/0xc0   [<ffffffff81303025>] selinux_socket_connect+0x135/0x170   [<ffffffff8119d127>] ? might_fault+0x57/0xb0   [<ffffffff812fb146>] security_socket_connect+0x16/0x20   [<ffffffff815d3ad3>] SYSC_connect+0x73/0x130   [<ffffffff81739a85>] ? sysret_check+0x22/0x5d   [<ffffffff810e5e2d>] ? trace_hardirqs_on_caller+0xfd/0x1c0   [<ffffffff81373d4e>] ? trace_hardirqs_on_thunk+0x3a/0x3f   [<ffffffff815d52be>] SyS_connect+0xe/0x10   [<ffffffff81739a59>] system_call_fastpath+0x16/0x1b", "target": 0}
{"idx": 2364, "commit_message": "Cache xattr security drop check for write v2  Some recent benchmarking on btrfs showed that a major scaling bottleneck on large systems on btrfs is currently the xattr lookup on every write.  Why xattr lookup on every write I hear you ask?  write wants to drop suid and security related xattrs that could set o capabilities for executables.  To do that it currently looks up security.capability on EVERY write (even for non executables) to decide whether to drop it or not.  In btrfs this causes an additional tree walk, hitting some per file system locks and quite bad scalability. In a simple read workload on a 8S system I saw over 90% CPU time in spinlocks related to that.  Chris Mason tells me this is also a problem in ext4, where it hits the global mbcache lock.  This patch adds a simple per inode to avoid this problem.  We only do the lookup once per file and then if there is no xattr cache the decision. All xattr changes clear the flag.  I also used the same flag to avoid the suid check, although that one is pretty cheap.  A file system can also set this flag when it creates the inode, if it has a cheap way to do so.  This is done for some common file systems in followon patches.  With this patch a major part of the lock contention disappears for btrfs. Some testing on smaller systems didn't show significant performance changes, but at least it helps the larger systems and is generally more efficient.  v2: Rename is_sgid. add file system helper. Cc: [URL] Cc: [URL] Cc: [URL].uk Cc: [URL] Cc: Serge E. Hallyn [URL]>", "target": 1}
{"idx": 2638, "commit_message": "Merge branch 'np/pack'  * np/pack:   improve depth heuristic for maximum delta size   pack-object: slightly more efficient   simple euristic for further free packing improvements", "target": 1}
{"idx": 1094, "commit_message": "Tidy up enum docs, specs and optimizations", "target": 0}
{"idx": 4126, "commit_message": "[PATCH] MultiReduce kernels now instantiate a series of power of two\n block sizes: this improves performance significantly", "target": 1}
{"idx": 2946, "commit_message": "f2fs: readahead contiguous current summary blocks in checkpoint  Let's add readahead code for reading contiguous compact/normal summary blocks in checkpoint, then we will gain better performance in mount procedure.  Changes from v1   o remove inappropriate 'unlikely' in npages_for_summary_flush.", "target": 1}
{"idx": 3866, "commit_message": "Merge pull request #405 from ryanpetrello/fix-7568  defer UnifiedJob.result_stdout_text for improved performance", "target": 1}
{"idx": 1113, "commit_message": "Merge pull request #10106 from som-snytt/issue/11697-linearseqops-isEmpty  Improve Scaladoc for LinearSeqOps isEmpty, head, tail", "target": 0}
{"idx": 1952, "commit_message": "use QDBusServiceWatcher  svn path=/trunk/KDE/kdebase/workspace/solid/networking/; revision=1107226", "target": 0}
{"idx": 2642, "commit_message": "CogVM source as per VMMaker.oscog-eem.1317  Cogit: Fix the performance regression on x86 in r3308 VMMaker.oscog-eem.1178 through the use of the XCHG instruction in CogIA32Compiler>>genPushRegisterArgsForNumArgs:. Since SendNumArgsReg is not live with small arity sends it can be used instead of TempReg.  Replace uses of the magic constant 2 with NumSendTrampolines - 2 (actually <= 2 => < (NumSendTrampolines - 1)) where appropriate. Hence NumSendTrampolines moved to CogCompilationConstants.  Fix bug on ARM with pc-relative addressing. pc-relative addressing can only be used within a method because of relocation.  The old code would use pc-relative addressing to access trampolines for methods close to the trampolines and then not for methods further away, causing changes in the code generated by compileInterpreterPrimitive:.  To support this, rationalize the PIC compilation code, being sure to initialize and concretize methodLabel at the start of each PIC.  Don't bother to pass PIC size as a parameter given we have PIC-specific header-filling routines now.  Spur: Firm up the checkTraversableSortedFreeList assert routine to check that the list is traversable from lastFreeChunk, not just firstFreeChunk.  Slang: Make promoteArithmeticTypes:and: obey C99's promotion rules more closely in an effort to generate more stable sources.  Types were flipping between sqInt & usqInt for variables that were assigned both types, so that one generation would produce one type and a subsequent one another (Set/Dictionary hashing?).", "target": 1}
{"idx": 5, "commit_message": "Merge pull request #2012 from mposolda/master  KEYCLOAK-2290 Migration fixes. Bulk update of algorithm field during migration", "target": 0}
{"idx": 470, "commit_message": "Apply trivial optimizations to DOMAIN_REGEX.", "target": 0}
{"idx": 1789, "commit_message": "Improved resistome table (hover over) + CSV download", "target": 0}
{"idx": 663, "commit_message": "ORC-1027: Allows the discovery of filters via the plugin interface. (#936)  ### What changes were proposed in this pull request?  Allow injection of filters to be applied during read via a PluginService using the Java ServiceLoader.    ### Why are the changes needed?  The current integration uses SearchArguments this does allow easy integration but cannot be used to represent complex predicates e.g. predicates using a function, in these cases the predicate applicable is not optimized using LazyIO.    This allows a means to workaround this limitation by injecting user defined filters that are applied during read.    ### How was this patch tested?  Regression Tests were successful  Additional Tests were added to test the Plugin functionality.", "target": 0}
{"idx": 3812, "commit_message": "feat: use DedupList in player.songs for better performance", "target": 1}
{"idx": 962, "commit_message": "domain: add pinnings support to GetVCpus()", "target": 0}
{"idx": 2351, "commit_message": "[PATCH] fetch.c: Make process() look at each object only once  The process() function is very often called multiple times for the same object (because lots of trees refer to the same blobs), but did not have a fast check for this, therefore a lot of useless calls to has_sha1_file() and parse_object() were made before discovering that nothing needs to be done.  This patch adds the SEEN flag which is used in process() to make it look at each object only once.  When testing git-local-fetch on the repository of GIT, this gives a 14x improvement in CPU usage (mainly because the redundant calls to parse_object() are now avoided - parse_object() always unpacks and parses the object data, even if it was already parsed before).", "target": 1}
{"idx": 2634, "commit_message": "[Ada] Improve performance for case-insensitive regular expressions  gcc/ada/  \t* libgnat/s-regpat.adb (Match): Handle the case where Self.First \tis not NUL (so we know the first character we are looking for), \tbut case-insensitive matching has \tbeen specified. \t(Optimize): In the case of an EXACTF Op, set Self.First as is \tdone in the EXACT case, except with the addition of a call to \tLower_Case.", "target": 1}
{"idx": 3321, "commit_message": "Rollup merge of #60358 - nickolay:patch-1, r=GuillaumeGomez  Clarify the short explanation of E0207  After being greatly improved in #33692, [URL]/error-index.html#E0207 uses terminology from the related RFC, which is different from the [URL]/reference/items/implementations.html), e.g. \"self type\" instead of \"implementing type\" and \"trait reference\" instead of \"implemented trait\".  It probably makes no difference to an experienced reader, but for a newbie like me it added to the confusion as you can't look up the definition of the terms being used and can't be sure you've guessed correctly...  I would also move the link to RFC to the top, as it seems to be the only doc that attempts to explain what the third criteria entails), but it seems to go against the accepted style.", "target": 0}
{"idx": 2926, "commit_message": "6642881: Improve performance of Class.getClassLoader() Summary: Add classLoader to java/lang/Class instance for fast access", "target": 1}
{"idx": 2204, "commit_message": "Replace diacriticless-Module with optimized internal alternative (#842)  As the npm-Module \"diacriticless\" is highly inefficient when replacing  dicritics (it iterates thousands of times multiple arrays) and the  author does not merge the proposed pull-request with a very optimized  routine of this, this optimization is now implemented locally in  vue-good-table. As [URL]/xaksis/vue-good-table/issues/545  states, there is a performanceproblem because of the  diacriticless-implementation. So this could help fixing this issue as  well.", "target": 1}
{"idx": 1598, "commit_message": "algo: Update minilzo code to the latest version (2.06).  The version we are shipping is very and contain lots of bugs. There should be no downsides in using the latest version.  A nice improvement with the new code is some binary size savings as bloat-o-meter reports:  add/remove: 4/5 grow/shrink: 4/2 up/down: 1471/-2567 (-1096)", "target": 0}
{"idx": 922, "commit_message": "Reland of mac: Remove POSIX shared memory. (patchset #1 id:1 of [URL]/1890023002/ )  Reason for revert: The original CL was reverted on suspicion of causing a crash. It was not responsible.  [URL]/p/chromium/issues/detail?id=603452  Original issue's description: > Revert of mac: Remove POSIX shared memory. (patchset #8 id:140001 of [URL]/1867733002/ ) > > Reason for revert: > Looking for the cause of [URL]/603452. > > Original issue's description: > > mac: Remove POSIX shared memory. > > > > There are no more consumers. > > > > BUG=568284 > > > > Committed: [URL]/acc9ec9e73902650962df0c24a209abfc2a827ef > >", "target": 0}
{"idx": 4070, "commit_message": "[PATCH] WIP Fixed performance of multi-range subarray result\n estimation", "target": 1}
{"idx": 945, "commit_message": "Added a paramter to disable Nagle's algorithm.  I found there was a problem when sending small packets, packets are buffered for 40ms before it arrives at the destination, even on the high speed LAN.  After diagnoses, I concluded it was not the application's fault, and it's the Nagle's algorithm to blame.  SO I made the tcp service can configure to disable Nagle's algorithm.  Example:  # disable Nagle's algorithm SET_TCP_NODELAY = 1  This parameter is 0 by default. (on Linux, Nagle's algorithm is enabled by default)  --HG-- branch : chuangw/unit_test", "target": 0}
{"idx": 905, "commit_message": "Improve tabular inline, CSS updates.", "target": 0}
{"idx": 142, "commit_message": "Optimize gpsSolutionData_t flags  Use bool rather than bitfields for the boolean fields. This allows the compiler to emit shorter assembly while keeping sizeof(gpsSolutionData_t) at 44 bytes.  | Filename              | Prev size | Cur size | Change | --------------------------------------------------------- |         inav_CC3D.elf |    125264 |   125248 |    -16 | |    inav_OMNIBUSF4.elf |    197420 |   197356 |    -64 | | inav_OMNIBUSF4PRO.elf |    205262 |   205182 |    -80 | |   inav_SPRACINGF3.elf |    180948 |   180868 |    -80 |", "target": 1}
{"idx": 1755, "commit_message": "Merge remote-tracking branch 'origin' into select-gpu", "target": 0}
{"idx": 4060, "commit_message": "[PATCH] bond/react: performance improvement", "target": 1}
{"idx": 3110, "commit_message": "Performance optimization: cache the result of the disk scan looking for icons for dashboards", "target": 1}
{"idx": 721, "commit_message": "Merge pull request #349 from matrix-org/rageshake_132  MXRoomState: Improve algorithm to manage room members displaynames disambiguation", "target": 0}
{"idx": 2613, "commit_message": "base_series and hash_set: improved performance on insertion, and introduced two more low-level methods in hash_set.", "target": 1}
{"idx": 879, "commit_message": "Merge pull request #825 from wordpress-mobile/issue/custom-deserializer  Custom deserializer helpers and improvements", "target": 0}
{"idx": 2418, "commit_message": "Fixed minor issues Added dynamic image MAP vs Player (players performance)", "target": 0}
{"idx": 1152, "commit_message": "remove finished TODOs, improve djangoadmin list-view pages", "target": 0}
{"idx": 3270, "commit_message": "Improve performance when converting between DBs  Use a transaction when doing multiple inserts increase the writing speed.  Ref: [URL]/a/68495887", "target": 1}
{"idx": 2110, "commit_message": "HBASE-12219 Cache more efficiently getAll() and get() in FSTableDescriptors", "target": 1}
{"idx": 3970, "commit_message": "Don't call CRASH() in fastMalloc and fastCalloc when the requested memory size is 0 [URL]/show_bug.cgi?id=34569  Patch by Kwang Yul Seo [URL]> on 2010-02-05 Reviewed by Alexey Proskuryakov.  With USE_SYSTEM_MALLOC=1, fastMalloc and fastCalloc call CRASH() if the return value of malloc and calloc is 0.          However, these functions can return 0 when the request size is 0. Libc manual says, \"If size is 0, then malloc() returns either NULL, or a unique pointer value that can later be successfully passed to free().\" Though malloc returns a unique pointer in most systems, 0 can be returned in some systems. For instance, BREW's MALLOC returns 0 when size is 0.  If malloc or calloc returns 0 due to allocation size, increase the size to 1 and try again.  * wtf/FastMalloc.cpp: (WTF::fastMalloc): (WTF::fastCalloc):", "target": 0}
{"idx": 3221, "commit_message": "Make examples test cases (#426)  * \"example\" is now \"sample\" so examples can be tests    Renamed example to \"sample\" because the existing examples will become  tests.    * Starting work for adding example tests    * Should now work on Windows    * clangformat    * Abstracting cross-platform (WIP)    * fastpointcloud hacky but tests on linux    * fastpointcloud test works on windows    * less memory usage so it doesn't segfault anymore    * Made declaration static    * clangformat    * tried to fix up testing issues    * factored out a chunk of code    * Added SetUp so the testing dir is only made once    * Added calibration test    * Should work on Windows now    * Disable the logging for examples test    We want to be able to test the output of the examples without dealing with the logging    * loosened regex checker strictness    * removed strict assertion    * Added an enumerate test    * Transformation example better supports Linux    * Added a transformation feature test    * Add simple opencv compat test    * Added a basic test for the streaming example    This test enforces that at least one of 20 captures has both IR and color data    * Added a simple undistort test case    * Removed remnants of moved streaming    * Cleaned up code as suggested    * Backslashes for windows commands    * Factor out getting path to binary    * clangformat    * Factored out some ifdefs    * Fixed for Windows    * Cleanup and flush    * Renamed examples test to executables test    This definition better specifies what exactly is tested, and we can test other executables that aren't examples    * Modified the working directory for CTest (Linux)    * Revert \"Modified the working directory for CTest (Linux)\"    This reverts commit f43c4112ddc6f86351ed4254dc297b33cb0c1085.    * Fixed the binary paths but keep Windows backslash    * Attempt to fix python script to run properly    * Actually use, not just print, that change    * flush instead of endl because no need for newline    * Factored assertions out of functions    In Google Test, ASSERT_* clauses can cause the function to exit- however,  because we had nested functions, the function was continuing in a very  questionable state.    * Added explanatory comment for regex test function    * Re-named example test as example    * Pass parameters by pointers rather than by reference", "target": 0}
{"idx": 4108, "commit_message": "[PATCH] Optimize load_tile_offsets for only relevant frags\n\nThis optimization is to adjust the `Reader::load_tile_offsets` class to\nonly loop over the relevant fragments as computed by the subarray class\nbased on intersection. This is a performance optimization for arrays\nwhich have a large number of fragments and which we are incorrectly\nfetching a large amount of unneeded data.", "target": 1}
{"idx": 3989, "commit_message": "IStore slice(istore, min, max) (#88)  IStore slice(istore, min, max)    Add slice_min_max function which slices istore based on a range.  The benefit to write SELECT slice(istore, 10, 15)  instead of SELECT slice(istore, ARRAY[10, 11, 12, 13, 14, 15])  is not only readability but also performance.  A quick benchmark showed about 30% improvement.    In alignment to hstore behaviour we return an empty istore instead of NULL  when slicing for non existing keys.", "target": 1}
{"idx": 672, "commit_message": "optimize DateUtil", "target": 1}
{"idx": 2520, "commit_message": "pts-core: More efficient paths for determining reference system comparisons", "target": 1}
{"idx": 1405, "commit_message": "Importing Collision namespace from Nick Koirala (original version), ahnonay (SFML2 compatibility). Applying pixel perfect collision between player and enemy. Altering dynamic grid updating. ... :D", "target": 0}
{"idx": 196, "commit_message": "Config option to disable side-band-64k for transport  Since commit 0c499ea60f the send-pack builtin uses the side-band-64k capability if advertised by the server.  Unfortunately this breaks pushing over the dump git protocol if used over a network connection.  The detailed reasons for this breakage are (by courtesy of Jeff Preshing, quoted from [URL]/d/msg/msysgit/at8D7J-h7mw/eaLujILGUWoJ): ---------------------------------------------------------------------------- MinGW wraps Windows sockets in CRT file descriptors in order to mimic the functionality of POSIX sockets. This causes msvcrt.dll to treat sockets as Installable File System (IFS) handles, calling ReadFile, WriteFile, DuplicateHandle and CloseHandle on them. This approach works well in simple cases on recent versions of Windows, but does not support all usage patterns. In particular, using this approach, any attempt to read & write concurrently on the same socket (from one or more processes) will deadlock in a scenario where the read waits for a response from the server which is only invoked after the write. This is what send_pack currently attempts to do in the use_sideband codepath. ----------------------------------------------------------------------------  The new config option \"sendpack.sideband\" allows to override the side-band-64k capability of the server, and thus makes the dump git protocol work.  Other transportation methods like ssh and http/https still benefit from the sideband channel, therefore the default value of \"sendpack.sideband\" is still true.", "target": 0}
{"idx": 1794, "commit_message": "staging: android: lowmemorykiller: convert to for_each_thread", "target": 0}
{"idx": 3426, "commit_message": "Bug#17310878 PFS OVERHEAD ON FREQUENT CONNECT/DISCONNECT  This fix is for MySQL 5.7  This fix is a performance improvement.  The issue was that the call to PSI_THREAD_CALL(delete_current_thread)(), which is executed each time a thread disconnects, was placed inside a critical section involving LOCK_thread_count.  The fix is to perform the same call sooner, before entering the LOCK_thread_count critical section.  Serializing all calls to pfs_delete_current_thread_v1() was the major cause of performance overhead, for frequent connect/disconnect.", "target": 1}
{"idx": 3752, "commit_message": "Applied additional patches for LOG4NET-154 to improve functionality of StackTracePatternConverter.", "target": 0}
{"idx": 3388, "commit_message": "backport fixes and performance improvements from 0.8 branch  Patches applied:   * [URL]--public/itools--main--0.8--base-0    tag of [URL]--public/itools--main--0.7--patch-30   * [URL]--public/itools--main--0.8--patch-1    resources, initialization is more robust now   * [URL]--public/itools--main--0.8--patch-2    resources, fix zope2 resources   * [URL]--public/itools--main--0.8--patch-3    resources, implement get_ctime and get_atime for Zope 2   * [URL]--public/itools--main--0.8--patch-4    resources, implement __setitem__ (Zope 2 file resources)   * [URL]--public/itools--main--0.8--patch-6    catalog, now the method \"search\" is a generator   * [URL]--public/itools--main--0.8--patch-7    catalog, optimize search (cache documents)  git-archimport-id: [URL]--public/itools--main--0.7--patch-32", "target": 1}
{"idx": 3200, "commit_message": "Apply patch by Jason Davies that improves how the view menu is populated: only one HTTP request (thanks to `include_docs`), and design docs and view names are sorted alphabetically. Closes COUCHDB-426.", "target": 0}
{"idx": 3027, "commit_message": "Merge pull request #232 from calrissian/timenormalize  Fixes #204.  Use a more efficient algorithm for normalizing the timestam...", "target": 1}
{"idx": 3056, "commit_message": "Merge branch 'sched-mm-for-linus' of [URL]/pub/scm/linux/kernel/git/tip/tip  Pull voluntary preemption fixes from Ingo Molnar:  \"This tree contains a speedup which is achieved through better   might_sleep()/might_fault() preemption point annotations for uaccess   functions, by Michael S Tsirkin:    1. The only reason uaccess routines might sleep is if they fault.      Make this explicit for all architectures.    2. A voluntary preemption point in uaccess functions means compiler      can't inline them efficiently, this breaks assumptions that they      are very fast and small that e.g.  net code seems to make.  Remove      this preemption point so behaviour matches with what callers      assume.    3. Accesses (e.g through socket ops) to kernel memory with KERNEL_DS      like net/sunrpc does will never sleep.  Remove an unconditinal      might_sleep() in the might_fault() inline in kernel.h (used when      PROVE_LOCKING is not set).    4. Accesses with pagefault_disable() return EFAULT but won't cause      caller to sleep.  Check for that and thus avoid might_sleep() when      PROVE_LOCKING is set.    These changes offer a nice speedup for CONFIG_PREEMPT_VOLUNTARY=y   kernels, here's a network bandwidth measurement between a virtual   machine and the host:     before:         incoming: 7122.77   Mb/s         outgoing: 8480.37   Mb/s     after:         incoming: 8619.24   Mb/s   [ +21.0% ]         outgoing: 9455.42   Mb/s   [ +11.5% ]    I kept these changes in a separate tree, separate from scheduler   changes, because it's a mixed MM and scheduler topic\"  * 'sched-mm-for-linus' of [URL]/pub/scm/linux/kernel/git/tip/tip:   mm, sched: Allow uaccess in atomic with pagefault_disable()   mm, sched: Drop voluntary schedule from might_fault()   x86: uaccess s/might_sleep/might_fault/   tile: uaccess s/might_sleep/might_fault/   powerpc: uaccess s/might_sleep/might_fault/   mn10300: uaccess s/might_sleep/might_fault/   microblaze: uaccess s/might_sleep/might_fault/   m32r: uaccess s/might_sleep/might_fault/   frv: uaccess s/might_sleep/might_fault/   arm64: uaccess s/might_sleep/might_fault/   asm-generic: uaccess s/might_sleep/might_fault/", "target": 1}
{"idx": 3359, "commit_message": "Improve performance of Python serialization.  Patch from Will Pierce.", "target": 1}
{"idx": 1309, "commit_message": "Fix 100% CPU usage while session is taking place", "target": 0}
{"idx": 449, "commit_message": "Improve spinner icon", "target": 0}
{"idx": 2434, "commit_message": "DBZ-2315 fix BIT VARYING handling in Postgres connector * removed little endian padding for BIT types in JdbcValueConverters (only used for Postgres yet) * removed legacy format handling fot BIT related types in JdbcValueConverters#convertBits which were leftovers from PR #1408 * removed unnecessary zero-ing of a newly created byte array to improve performance for huge byte arrays * updated Postgres connector docs", "target": 1}
{"idx": 1540, "commit_message": "Reduce memory usage in DEX files by caching the getstr calls ##bin (#16706)  type    top    vsz     rss      time  ------------------------------------  calloc  339M   4732640 365452   48s  pvector 338M   4731012 371484   48s // XXX fails somehow with trash indexes  htup    338M   4731556 371620   58s  nocache 350M   4742936 376156   52s", "target": 1}
{"idx": 2598, "commit_message": "Preserve Variant parsed from JSON in iniLoad().  The fix for = characters in info files (039d314) added JSON validation but discarded the resulting Variant which means the JSON is being parsed twice. This nearly doubles the time to load a manifest since a lot of complex JSON is involved.    Time to load a million file manifest:  Before 039d314: 7.8s  039d314: 15.5s  This patch: 7.5s    To fix this regression return the Variant in the callback so the caller does not have to parse it again. The new code appears slightly more efficient overall, probably because there are fewer operations against Strings.", "target": 1}
{"idx": 683, "commit_message": "Updated docs for TopCPU / TopMemory returns", "target": 0}
{"idx": 1574, "commit_message": "performance tweaks", "target": 1}
{"idx": 2352, "commit_message": "Went to ArrayList to be more memory efficient", "target": 1}
{"idx": 2078, "commit_message": "af-packet: better accounting and error handling  This patch improves the bypass error handling add adds more counters to the interface so it is possible to get a view on success and failure of insertion in the eBPF maps via the `iface-bypassed-stat` command.", "target": 0}
{"idx": 3751, "commit_message": "making context gathering for processing attribute links more efficient", "target": 1}
{"idx": 359, "commit_message": "Misc improvements.", "target": 0}
{"idx": 642, "commit_message": "adding userdata to router and ssh pub key to router rules.  Conflicts: \tserver/src/org/apache/cloudstack/network/topology/BasicNetworkTopology.java \tserver/src/org/apache/cloudstack/network/topology/BasicNetworkVisitor.java", "target": 0}
{"idx": 2739, "commit_message": "mutex: Make more scalable by doing less atomic operations  Date        Mon, 15 Apr 2013 10:37:57 -0400  In the __mutex_lock_common() function, an initial entry into the lock slow path will cause two atomic_xchg instructions to be issued. Together with the atomic decrement in the fast path, a total of three atomic read-modify-write instructions will be issued in rapid succession. This can cause a lot of cache bouncing when many tasks are trying to acquire the mutex at the same time.  This patch will reduce the number of atomic_xchg instructions used by checking the counter value first before issuing the instruction. The atomic_read() function is just a simple memory read. The atomic_xchg() function, on the other hand, can be up to 2 order of magnitude or even more in cost when compared with atomic_read(). By using atomic_read() to check the value first before calling atomic_xchg(), we can avoid a lot of unnecessary cache coherency traffic. The only downside with this change is that a task on the slow path will have a tiny bit less chance of getting the mutex when competing with another task in the fast path.  The same is true for the atomic_cmpxchg() function in the mutex-spin-on-owner loop. So an atomic_read() is also performed before calling atomic_cmpxchg().  The mutex locking and unlocking code for the x86 architecture can allow any negative number to be used in the mutex count to indicate that some tasks are waiting for the mutex. I am not so sure if that is the case for the other architectures. So the default is to avoid atomic_xchg() if the count has already been set to -1. For x86, the check is modified to include all negative numbers to cover a larger case.  The following table shows the jobs per minutes (JPM) scalability data on an 8-node 80-core Westmere box with a 3.7.10 kernel. The numactl command is used to restrict the running of the high_systime workloads to 1/2/4/8 nodes with hyperthreading on and off.  +-----------------+-----------+------------+----------+ |  Configuration  | Mean JPM  |  Mean JPM  | % Change | |                  | w/o patch | with patch |              | +-----------------+-----------------------------------+ |                  |      User Range 1100 - 2000              | +-----------------+-----------------------------------+ | 8 nodes, HT on  |    36980   |   148590  | +301.8%  | | 8 nodes, HT off |    42799   |   145011  | +238.8%  | | 4 nodes, HT on  |    61318   |   118445  |  +51.1%  | | 4 nodes, HT off |   158481   |   158592  |   +0.1%  | | 2 nodes, HT on  |   180602   |   173967  |   -3.7%  | | 2 nodes, HT off |   198409   |   198073  |   -0.2%  | | 1 node , HT on  |   149042   |   147671  |   -0.9%  | | 1 node , HT off |   126036   |   126533  |   +0.4%  | +-----------------+-----------------------------------+ |                  |       User Range 200 - 1000              | +-----------------+-----------------------------------+ | 8 nodes, HT on  |   41525    |   122349  | +194.6%  | | 8 nodes, HT off |   49866    |   124032  | +148.7%  | | 4 nodes, HT on  |   66409    |   106984  |  +61.1%  | | 4 nodes, HT off |  119880    |   130508  |   +8.9%  | | 2 nodes, HT on  |  138003    |   133948  |   -2.9%  | | 2 nodes, HT off |  132792    |   131997  |   -0.6%  | | 1 node , HT on  |  116593    |   115859  |   -0.6%  | | 1 node , HT off |  104499    |   104597  |   +0.1%  | +-----------------+------------+-----------+----------+ At low user range 10-100, the JPM differences were within +/-1%. So they are not that interesting.  AIM7 benchmark run has a pretty large run-to-run variance due to random nature of the subtests executed. So a difference of less than +-5% may not be really significant.  This patch improves high_systime workload performance at 4 nodes and up by maintaining transaction rates without significant drop-off at high node count.  The patch has practically no impact on 1 and 2 nodes system.  The table below shows the percentage time (as reported by perf record -a -s -g) spent on the __mutex_lock_slowpath() function by the high_systime workload at 1500 users for 2/4/8-node configurations with hyperthreading off.  +---------------+-----------------+------------------+---------+ | Configuration | %Time w/o patch | %Time with patch | %Change | +---------------+-----------------+------------------+---------+ |    8 nodes    |      65.34%     |      0.69%       |  -99%   | |    4 nodes    |       8.70%          |      1.02%             |  -88%   | |    2 nodes    |       0.41%     |      0.32%       |  -22%   | +---------------+-----------------+------------------+---------+ It is obvious that the dramatic performance improvement at 8 nodes was due to the drastic cut in the time spent within the __mutex_lock_slowpath() function.  The table below show the improvements in other AIM7 workloads (at 8 nodes, hyperthreading off).  +--------------+---------------+----------------+-----------------+ |   Workload   | mean % change | mean % change  | mean % change   | |              | 10-100 users  | 200-1000 users | 1100-2000 users | +--------------+---------------+----------------+-----------------+ | alltests     |     +0.6%     |   +104.2%      |   +185.9%       | | five_sec     |     +1.9%     |     +0.9%      |     +0.9%       | | fserver      |     +1.4%     |     -7.7%      |     +5.1%       | | new_fserver  |     -0.5%     |     +3.2%      |     +3.1%       | | shared       |    +13.1%     |   +146.1%      |   +181.5%       | | short        |     +7.4%     |     +5.0%      |     +4.2%       | +--------------+---------------+----------------+-----------------+", "target": 1}
{"idx": 1192, "commit_message": "improved cursor handling in text editor", "target": 0}
{"idx": 1831, "commit_message": "Only fetching ID when using Warm trait  Reduces likelihood of large tables causing out of memory errors in the sort buffer", "target": 0}
{"idx": 257, "commit_message": "Set port if host port is not defined in mapping.  (#4317 and #4316)  * Set port labels in tests.    * Add network-scope to port labels.  * Use network scope label in test assertions.  * Set env var `PORT_NAME` even if mapping does not define host port.    closes #4317 and #4316", "target": 0}
{"idx": 1585, "commit_message": "Fix large memory leak in vector file writer (fix #16003)  Every written geometry is being leaked... ouch!", "target": 0}
{"idx": 1316, "commit_message": "Reland 720713002: Avoid getting CoreAudio into bad state.  This patch fixes two issues: 1) in audio_low_latency_input_mac.cc, when the number_of_frames is changed on the fly, previously we feed a audio_buffer_list which uses the original number_of_frames_ to CoreAudio, this will put CoreAudio into a bad state, and the consequence is that if the new input stream is trying to use a larger buffer size than what the previous input stream was using, AudioUnitRender() will return -50 for the new stream. Thus it leads to no input audio issue for webrtc.  2) gUM on Mac will create an input stream using 128 samples as buffer size at the beginning, and will re-create the stream using 10ms when a peer connection is connected to a audio track. It discards if audio processing is enabled or not. This patch avoids creating the first stream using 128 samples if audio processing is enabled.  BUG=428706 [URL] changes chrome3940Workaround to false, and make a call lots of time. Verify that the input stream always works.  Review URL: [URL]/721923002", "target": 0}
{"idx": 11, "commit_message": "Update RobotMemory.py  Found error with plotting, working on correcting", "target": 0}
{"idx": 411, "commit_message": "some improvements in brackets matching", "target": 0}
{"idx": 2244, "commit_message": "padata: Make two separate cpumasks  The aim of this patch is to make two separate cpumasks for padata parallel and serial workers respectively. It allows user to make more thin and sophisticated configurations of padata framework. For example user may bind parallel and serial workers to non-intersecting CPU groups to gain better performance. Also each padata instance has notifiers chain for its cpumasks now. If either parallel or serial or both masks were changed all interested subsystems will get notification about that. It's especially useful if padata user uses algorithm for callback CPU selection according to serial cpumask.", "target": 1}
{"idx": 4061, "commit_message": "[PATCH] 128-bit AVX2 SIMD support\n\nAdd 128 bit support for AVX2. Similar to AVX-128, this\nimproves slightly on SSE2 due to more efficient instructions,\nand the shorter SIMD width is beneficial in some cases. Both\n128- and 256-bit flavors will be built automatically with\n--enable-avx2, and the timing routines will chose the best one\nautomatically.", "target": 1}
{"idx": 650, "commit_message": "sctp: Don't charge for data in sndbuf again when transmitting packet  [ Upstream commit 4c3a5bdae293f75cdf729c6c00124e8489af2276 ]  SCTP charges wmem_alloc via sctp_set_owner_w() in sctp_sendmsg() and via skb_set_owner_w() in sctp_packet_transmit(). If a sender runs out of sndbuf it will sleep in sctp_wait_for_sndbuf() and expects to be waken up by __sctp_write_space().  Buffer space charged via sctp_set_owner_w() is released in sctp_wfree() which calls __sctp_write_space() directly.  Buffer space charged via skb_set_owner_w() is released via sock_wfree() which calls sk->sk_write_space() _if_ SOCK_USE_WRITE_QUEUE is not set. sctp_endpoint_init() sets SOCK_USE_WRITE_QUEUE on all sockets.  Therefore if sctp_packet_transmit() manages to queue up more than sndbuf bytes, sctp_wait_for_sndbuf() will never be woken up again unless it is interrupted by a signal.  This could be fixed by clearing the SOCK_USE_WRITE_QUEUE flag but ...  Charging for the data twice does not make sense in the first place, it leads to overcharging sndbuf by a factor 2. Therefore this patch only charges a single byte in wmem_alloc when transmitting an SCTP packet to ensure that the socket stays alive until the packet has been released.  This means that control chunks are no longer accounted for in wmem_alloc which I believe is not a problem as skb->truesize will typically lead to overcharging anyway and thus compensates for any control overhead.", "target": 0}
{"idx": 2819, "commit_message": "TracMercurial for 0.11: use `filelog.size`, which can give the size of a file in a much more efficient way than the naive `len(self.read())` used before, when revlogng is used. If revlogng is not used, `filelog.size()` reverts to the inefficient way, as that was the only way before revlogng. The other TracMercurial branch will not use this, so that it can remain compatible with old hg versions (0.8.1 and older).", "target": 1}
{"idx": 1989, "commit_message": "Fix a corner case issue when daemon panics  There is an extreme corner case where when the daemon panics at the same time as a container is stopping and cleaning up the sandbox and the sandbox may have been left with an inconsistent state. This libnetwork vendoring fixes that case.  Vendoring in libnetwork @ 5305ea570b85d61dd0fd261cd7e1680da1884678", "target": 0}
{"idx": 1329, "commit_message": "fix: running map project mobile performance tweaks", "target": 0}
{"idx": 3871, "commit_message": "Use Base.isperm() to check validity of the permutation. This is more efficient than the previous method.", "target": 1}
{"idx": 943, "commit_message": "Merge pull request #2705 from getsentry/expand-dates  Improve event date handling", "target": 0}
{"idx": 350, "commit_message": "dynamicAlbum object  Paves the way for multiple album class descendents", "target": 0}
{"idx": 2362, "commit_message": "Revert \"f2fs: check all ones or zeros bitmap with bitops for better mount performance\"  This reverts commit 5a82a295cbd1c1eb32547b7765b9a45691ab9428.", "target": 1}
{"idx": 458, "commit_message": "now predict the labels on GPU", "target": 0}
{"idx": 3916, "commit_message": "Update SpongeCommon for player tracker performance fix.", "target": 1}
{"idx": 1271, "commit_message": "Made some improvements to the registration page.", "target": 0}
{"idx": 3542, "commit_message": "20265 Fixed performance lag issue with dynamic tabs on task, project page etc.", "target": 1}
{"idx": 3632, "commit_message": "Performance fix (internal XML CDB DAL cache disabled).", "target": 1}
{"idx": 2934, "commit_message": "Improved dynamic default options performance (#10816)  closes #10789    * Updated keypair generation to use a memoised fn    This allows us to embed the members dynamic defaults in the object at  definition, and will allow us to only create the keypair when we need  it, in future.    * Added getDefaultValue fn to default setting obj    This will allow us to generate the default values when they're needed  rather than at boot time.    * Ensured dynamic defaults only generated when used    This replaces all the dynamic default values with functions to return  the values, and then calls (if required) that function inside the  getDefaultValue method of the setting object.", "target": 1}
{"idx": 3406, "commit_message": "Teach SROA how to split whole-alloca integer loads and stores into smaller integer loads and stores.  The high-level motivation is that the frontend sometimes generates a single whole-alloca integer load or store during ABI lowering of splittable allocas. We need to be able to break this apart in order to see the underlying elements and properly promote them to SSA values. The hope is that this fixes some performance regressions on x86-32 with the new SROA pass.  Unfortunately, this causes quite a bit of churn in the test cases, and bloats some IR that comes out. When we see an alloca that consists soley of bits and bytes being extracted and re-inserted, we now do some splitting first, before building widened integer \"bucket of bits\" representations. These are always well folded by instcombine however, so this shouldn't actually result in missed opportunities.  If this splitting of all-integer allocas does cause problems (perhaps due to smaller SSA values going into the RA), we could potentially go to some extreme measures to only do this integer splitting trick when there are non-integer component accesses of an alloca, but discovering this is quite expensive: it adds yet another complete walk of the recursive use tree of the alloca.  Either way, I will be watching build bots and LNT bots to see what fallout there is here. If anyone gets x86-32 numbers before & after this change, I would be very interested.", "target": 1}
{"idx": 3076, "commit_message": "slide updates BEM,performance,SASS,autoprefix,specificity", "target": 0}
{"idx": 653, "commit_message": "Improve documentation for increasing inotify limits", "target": 0}
{"idx": 633, "commit_message": "Improved screen command in relay server shell connection", "target": 0}
{"idx": 749, "commit_message": "Merge pull request #4071 from boegel/relax_test_dump_env_script  relax toolchain test by accepting both -march=native (x86_64) and -mcpu=native (aarch64)", "target": 0}
{"idx": 3311, "commit_message": "mmc: sdhci: Set pm_qos to performance mode if clock scaling is disabled  pm_qos is never set to PERFORMANCE_MODE although frequency is set to max frequency. For getting optimized performance ,set pm_qos to performance mode when clock scaling is disabled and if dynamic clock scaling is allowed, set it to performance init mode.", "target": 1}
{"idx": 106, "commit_message": "Refs #25290. Improve error messages and tidy up", "target": 0}
{"idx": 4000, "commit_message": "[PATCH] performance improvement through avoiding function call and\n dereference overhead\n\n- make i_to_potl() and ij_to_potl() functions inline and const\n- don't dereference inside the functions, but cache, if possible in external variables\n=> up to 15% speedup.", "target": 1}
{"idx": 2279, "commit_message": "rebase -i: also expand/collapse the SHA-1s via the rebase--helper  This is crucial to improve performance on Windows, as the speed is now mostly dominated by the SHA-1 transformation (because it spawns a new rev-parse process for *every* line, and spawning processes is pretty slow from Git for Windows' MSYS2 Bash).", "target": 1}
{"idx": 21, "commit_message": "Merge branch 'release/3.3.0'  * release/3.3.0:   perf(gui): reduce cpu usage by cutting redundant update actions", "target": 0}
{"idx": 2882, "commit_message": "rules_r: layered images for R library and binary  Summary: These images are more efficient by keeping a separate layer for packages from external repos which will remain relatively stable.  Reviewers: razvanm  Reviewed By: razvanm  Differential Revision: [URL]/D12550  fbshipit-source-id: 5b2bc2c", "target": 1}
{"idx": 4071, "commit_message": "[PATCH] Improve performance of random number generator calls", "target": 1}
{"idx": 1273, "commit_message": "Adding vectorized iddr/oddr cells", "target": 0}
{"idx": 3226, "commit_message": "Fixed RedundantEqualityComparisonBlock [URL]/rubocop-performance/cops_performance.html#performanceredundantequalitycomparisonblock", "target": 0}
{"idx": 2921, "commit_message": "New index code for the dbs; should improve performance for containers with a lot of recent deletes.", "target": 1}
{"idx": 3367, "commit_message": "improved performance while join all members to community (fixes #927)", "target": 1}
{"idx": 2044, "commit_message": "mm, compaction: make whole_zone flag ignore cached scanner positions  Patch series \"make direct compaction more deterministic\")  This is mostly a followup to Michal's oom detection rework, which highlighted the need for direct compaction to provide better feedback in reclaim/compaction loop, so that it can reliably recognize when compaction cannot make further progress, and allocation should invoke OOM killer or fail.  We've discussed this at LSF/MM [1] where I proposed expanding the async/sync migration mode used in compaction to more general \"priorities\". This patchset adds one new priority that just overrides all the heuristics and makes compaction fully scan all zones.  I don't currently think that we need more fine-grained priorities, but we'll see.  Other than that there's some smaller fixes and cleanups, mainly related to the THP-specific hacks.  I've tested this with stress-highalloc in GFP_KERNEL order-4 and THP-like order-9 scenarios.  There's some improvement for compaction stats for the order-4, which is likely due to the better watermarks handling.  In the previous version I reported mostly noise wrt compaction stats, and decreased direct reclaim - now the reclaim is without difference.  I believe this is due to the less aggressive compaction priority increase in patch 6.  \"before\" is a mmotm tree prior to 4.7 release plus the first part of the series that was sent and merged separately                                      before        after order-4:  Compaction stalls                    27216       30759 Compaction success                   19598       25475 Compaction failures                   7617        5283 Page migrate success                370510      464919 Page migrate failure                 25712       27987 Compaction pages isolated           849601     1041581 Compaction migrate scanned       143146541   101084990 Compaction free scanned          208355124   144863510 Compaction cost                       1403        1210  order-9:  Compaction stalls                     7311        7401 Compaction success                    1634        1683 Compaction failures                   5677        5718 Page migrate success                194657      183988 Page migrate failure                  4753        4170 Compaction pages isolated           498790      456130 Compaction migrate scanned          565371      524174 Compaction free scanned            4230296     4250744 Compaction cost                        215         203  [1] [URL]/Articles/684611/  This patch (of 11):  A recent patch has added whole_zone flag that compaction sets when scanning starts from the zone boundary, in order to report that zone has been fully scanned in one attempt.  For allocations that want to try really hard or cannot fail, we will want to introduce a mode where scanning whole zone is guaranteed regardless of the cached positions.  This patch reuses the whole_zone flag in a way that if it's already passed true to compaction, the cached scanner positions are ignored.  Employing this flag during reclaim/compaction loop will be done in the next patch. This patch however converts compaction invoked from userspace via procfs to use this flag.  Before this patch, the cached positions were first reset to zone boundaries and then read back from struct zone, so there was a window where a parallel compaction could replace the reset values, making the manual compaction less effective.  Using the flag instead of performing reset is more robust.  Link:", "target": 0}
{"idx": 249, "commit_message": "UI: improved cache manager", "target": 0}
{"idx": 852, "commit_message": "Merge pull request #327 from MysteriumNetwork/client+server  CI builds for all artifacts with a single client+server binary", "target": 0}
{"idx": 2156, "commit_message": "Adds documentation on performance improvement.", "target": 0}
{"idx": 890, "commit_message": "move algorithms to new package", "target": 0}
{"idx": 46, "commit_message": "cmd/libsnap-confine-private: improve sc_snap_drop_instance_name unit tests", "target": 0}
{"idx": 1196, "commit_message": "Upgrade ThermalDynamics energy ducts", "target": 0}
{"idx": 2428, "commit_message": "mach-msm: mpdecision: restructure locks, add delay  The new delay allows the CPU to come up before any other action is taken. This prevents fast plugging and also ensures the CPU hotplug process is really done, before trying to unplug it again (or plug it).  The new locks are more efficient, and only used if necessary.", "target": 1}
{"idx": 10, "commit_message": "optimization: lazy init of faces (ble-{syntax,color}.sh), removal of temporary files (ble-core.sh).  ble-syntax.sh, ble-core.sh: lazy initialization of _ble_faces_*. minor: modify messgese: initialization message, the header of the script ble.sh. ble.pp: Add pp switch `measure_load_time' to identify the initialization bottle neck. ble-core.sh (_ble_base_tmp.wipe): optimization, use parameter expansion instead of regex captures.", "target": 0}
{"idx": 3310, "commit_message": "* Includes are now always done via generated function call to protect   namespace. * config_load now always uses global config object to improve   performance.", "target": 1}
{"idx": 3299, "commit_message": "Re-writing tgdb to be more modular and efficient", "target": 1}
{"idx": 2100, "commit_message": "Small performance improvement  We can use search_opts for volume_list and volume_snapshot_list instead of filtering the results after we get the whole list to improve the performance.", "target": 1}
{"idx": 2186, "commit_message": "Merge tag '5.5-rc-smb3-fixes-part2' of [URL]/sfrench/cifs-2.6  Pull cifs fixes from Steve French:  \"Nine cifs/smb3 fixes:     - one fix for stable (oops during oplock break)     - two timestamp fixes including important one for updating mtime at      close to avoid stale metadata caching issue on dirty files (also      improves perf by using SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB over the      wire)     - two fixes for \"modefromsid\" mount option for file create (now      allows mode bits to be set more atomically and accurately on create      by adding \"sd_context\" on create when modefromsid specified on      mount)     - two fixes for multichannel found in testing this week against      different servers     - two small cleanup patches\"  * tag '5.5-rc-smb3-fixes-part2' of [URL]/sfrench/cifs-2.6:   smb3: improve check for when we send the security descriptor context on create   smb3: fix mode passed in on create for modetosid mount option   cifs: fix possible uninitialized access and race on iface_list   cifs: Fix lookup of SMB connections on multichannel   smb3: query attributes on file close   smb3: remove unused flag passed into close functions   cifs: remove redundant assignment to pointer pneg_ctxt   fs: cifs: Fix atime update check vs mtime   CIFS: Fix NULL-pointer dereference in smb2_push_mandatory_locks", "target": 1}
{"idx": 3678, "commit_message": "[XLA] More robust handling for input/output aliasing in mem space assignment.  In this CL, we substitute HloBuffer-based allocation decisions with HloValue-based ones so that we don't unnecessarily couple allocation decisions for values that have input/output aliasing relationships. We introduce required memory assignments for inputs and outputs which prohibit prefetching and can force evictions to ensure inputs/outputs are properly assigned in the default memory space. In a future CL, I will also add support for inputs/outputs that are pre-set to be in the alternate (fast) memory space.  PiperOrigin-RevId: 273337348", "target": 0}
{"idx": 3144, "commit_message": "Minor performance optimizations", "target": 1}
{"idx": 3188, "commit_message": "fixed performance during insert", "target": 1}
{"idx": 3759, "commit_message": "NeuralNet | Performance optimization for Weaver & Neuron.", "target": 1}
{"idx": 2171, "commit_message": "Merge pull request #62 from flyvictor/improve-linking-performance  Rollback .lean()", "target": 1}
{"idx": 2349, "commit_message": "More fixes in new DB code, more improvements, major performance boost on clusters.  - Added another function for getting statistics from the db (get_statistics), only used in one script ATM. This function can take an array of statistics to fetch from the database at once, avoiding multiple DB calls and problems with DB locking in SQLite. This is a partner function to set_statistics which takes a hash of statistics names as keys and values as values in the hash, allowing multiple stats to be set at once. - Fixed silent bug in map_dup where the wrong return value was used to count the number of records to iterate through (introduced in the start of the 1.10 beta) - Using the temp directory for the edges file. Results in a major improvement in the performance for step 13. Similar improvement might be possible in steps 14/15 but these would have to be merged since if steps are submitted as separate jobs on a cluster, the node may be different. Improvement comes from the fact that the temp space is local to the node, and this step produces *many* small files. - Added a command to clear the edges temp directory at the end of step 13. - Changed how the DB is queried in one section of map_dup to avoid multiple unecessary SELECTs. Now we use one large join, and go over that, rather than uselessly going over a list of values, some of which may not be represented anyway. - Similarly, removed unecessary temp tables in map_dup. - Fixed bug introduced in beta in map_dup where for SQLite, an update was being made incorrectly giving incorrect results. - Using new get_statistics function in updaterefs.pl to fetch needed stats all at once independent from a local DB handle. - No longer passing in a persistent DB handle to the print_* functions in updaterefs.pl since we need to both use a local handle and delegate stat getting/setting to library functions with their own DB handle. This is incompatible with SQLite's concurrency limitations. Now, each function gets its own handle when needed, after getting the stats it requires using get_statistics. - Changed how vntrseek.pl sets the next step after clearing an error. Using a list of stat values to do this, since currently vntrseek uses the definedness of completion dates for each step to decide which step comes next. - Fix in vntrseek.pl introduced with the above change where some steps could not be set correctly due to the fact that there are empty steps. Some date fields are simply repeated in the list, which allows the general solution to work as intended. - Clearing errno variable in main.c file of pcr_dup binary. This lets us be sure we are checking success of each call to strtol properly.", "target": 1}
{"idx": 3855, "commit_message": "p7519: allow running without watchman prereq  p7519 measures the performance of the fsmonitor code. To do this, it uses the installed copy of Watchman. If Watchman isn't installed, a noop integration script is installed in its place.  When in the latter mode, it is expected that the script should not write a \"last update token\": in fact, it doesn't write anything at all since the script is blank.  Commit 33226af42b (t/perf/fsmonitor: improve error message if typoing hook name, 2020-10-26) made sure that running 'git update-index --fsmonitor' did not write anything to stderr, but this is not the case when using the empty Watchman script, since Git will complain that:      $ which watchman     watchman not found     $ cat .git/hooks/fsmonitor-empty     $ git -c core.fsmonitor=.git/hooks/fsmonitor-empty update-index --fsmonitor     warning: Empty last update token.  Prior to 33226af42b, the output wasn't checked at all, which allowed this noop mode to work. But, 33226af42b breaks p7519 when running it without a 'watchman(1)' on your system.  Handle this by only checking that the stderr is empty only when running with a real watchman executable. Otherwise, assert that the error message is the expected one when running in the noop mode.", "target": 0}
{"idx": 1694, "commit_message": "Added EncryptedString class to encrypt key in memory.", "target": 0}
{"idx": 1191, "commit_message": "radeon: workaround pinning failure on low ram gpu  commit 97b6ff6be9da7675aab339334fda996d6c5077d9 upstream.  GPU with low amount of ram can fails at pinning new framebuffer before unpinning old one. On such failure, retry with unpinning old one before pinning new one allowing to work around the issue. This is somewhat ugly but only affect those old GPU we care about.", "target": 0}
{"idx": 2521, "commit_message": "Refactor parser into hybrid direct/cps style  Slight API breakage.  Should be faster and use less memory.  wait_mail still needs to be updated.", "target": 1}
{"idx": 1296, "commit_message": "Rewrote completely the enclosing spherical cap computation on 2-sphere.  The previous version was based on Welzl algorithm, but it appeared this algorithm really need some properties that hold in Euclidean spaces and not on the sphere.  The current version is not perfect in the sense that some times the enclosing spherical cap returned is not the smallest possible. It is documented in the Javadoc.", "target": 0}
{"idx": 622, "commit_message": "[en] improve VB_NN, creates still a lot false alarms", "target": 0}
{"idx": 904, "commit_message": "small improvements", "target": 0}
{"idx": 2096, "commit_message": "RenderableWorldImpl changes. Addressed issues mentioned so far: public static variables made private for the time being; config-requiring static variables made non-static, as requested by immortius; small compromise/temporary changes to the comparators and the squaredDistanceToCamera() method for a small performance improvement.", "target": 1}
{"idx": 2417, "commit_message": "Add a possibility to set a custom InstantiationStrategy. The Kryo.DefaultInstantiatorStrategy implements the usual Kryo behavior, where it tries to invoke a no-arg constructor when it needs to create a new instance. But when org.objenesis.strategy.StdInstantiatorStrategy is used, then new instances are created without invoking a no-arg constructor, even if such a constructor is available. This improves Kryo's performance on fast-serialization tests (see issue #138)", "target": 1}
{"idx": 1961, "commit_message": "Workaround per problema di determinazione del carico della CPU (Refs #475)", "target": 0}
{"idx": 1876, "commit_message": "Replaced bedtools with deeptools for bam2bigwig  Replaced bedtools with deeptools bamCoverage for bam2bigwig subpipeline so bigger bam files can be processed and less memory and time are required.  (to be merged instead of #52)", "target": 0}
{"idx": 2464, "commit_message": "Improved performance by processing incoming data asyncronously every 100 ms, made profiling data more realistic as well. Other changes: * Added Cc/Ci/Cu shortcut constants * Fixed the way application directory was determined (failed for XULRunner-based applications) * Shared services between functions where it made sense * Improved performance of the Clear button * Report caught errors to error console instead of swallowing them silently", "target": 1}
{"idx": 308, "commit_message": "Improve README for Docker hub.", "target": 0}
{"idx": 137, "commit_message": "improved arrays lib tests", "target": 0}
{"idx": 3800, "commit_message": "bash completion: Cache the options list  The bash completion seems to be working decently at this point, so I feel comfortable caching the options output to improve the performance of the completion.", "target": 1}
{"idx": 3781, "commit_message": "substitution filter buffer now matches the buffer size of the http request for improved performance", "target": 1}
{"idx": 1536, "commit_message": "Added debug information and some optimization options", "target": 0}
{"idx": 2640, "commit_message": "Invert if condition inside SSF order  Since the list is sorted, we can break out of the loop as soon as we are looking at timestamps larger than the expected timestamp. This should yield a negligible performance benefit for larger queue sizes.", "target": 1}
{"idx": 2914, "commit_message": "Improve performance on large task queues.  Fix registry.getitem_reset(), registry.popitem(), and registry.popitem_move() to not try to read every work unit only to find the next available one. This shows up as TaskMaster.get_work() taking several seconds on very large task queues.", "target": 1}
{"idx": 50, "commit_message": "chore: improve tests", "target": 0}
{"idx": 326, "commit_message": "Merge pull request #1013 from NebulousLabs/ibd  IBD improvements", "target": 0}
{"idx": 737, "commit_message": "net: call rcu_read_lock early in process_backlog  [ Upstream commit 2c17d27c36dcce2b6bf689f41a46b9e909877c21 ]  Incoming packet should be either in backlog queue or in RCU read-side section. Otherwise, the final sequence of flush_backlog() and synchronize_net() may miss packets that can run without device reference:  CPU 1                  CPU 2                        skb->dev: no reference                        process_backlog:__skb_dequeue                        process_backlog:local_irq_enable  on_each_cpu for flush_backlog =>       IPI(hardirq): flush_backlog                        - packet not found in backlog                         CPU delayed ... synchronize_net - no ongoing RCU read-side sections  netdev_run_todo, rcu_barrier: no ongoing callbacks                        __netif_receive_skb_core:rcu_read_lock                        - too late free dev                        process packet for freed dev  Fixes: 6e583ce5242f (\"net: eliminate refcounting in backlog queue\") Cc: Eric W. Biederman [URL]> Cc: Stephen Hemminger [URL]>", "target": 0}
{"idx": 3722, "commit_message": "Revert \"Use infinite cull rect for contents of small composited scrollers\"  This reverts commit e74b6f53c6607cf1162090304bf388e8a1a8b156.  Reason for revert: Need to investigate the performance regressions [URL]/1316596.  Original change's description: > Use infinite cull rect for contents of small composited scrollers > > Use infinite cull rect for contents of composited scrollers if > the expanded cull rect covers the whole scrolling contents. > > Also add a fast path in CullRect::ApplyPaintProperties() when the > input cull rect is infinite and there is no additional clip, to > avoid geometry calculation. > > The benefits of this CL are: > 1. Reduces cost of cull rect calculation for the contents cull rect >    of descendants of small scrollers. > 2. Reduces change of contents cull rect of small scrollers and forced >    cull rect of children on change of the scroller's contents cull >    rect. > 3. Reduces proactive cull rect update of descendants of small >    scrollers on scroll. > > Bug: 1253726 >", "target": 0}
{"idx": 445, "commit_message": "Merge pull request #72 from marcelohama/master  Bug fixes and Improvements", "target": 0}
{"idx": 1466, "commit_message": "Far improved template class with correct inheritence via metatables", "target": 0}
{"idx": 3667, "commit_message": "multi-iovec and jumbo frames  This handles some issues on \"bigger than trivial\" packets.  - sets the maximum frame size (register MAXFRS) to 9000+18 bytes.  It could be nice to use a configurable option, but it's a chip-wide setting, so it's likely better to simply set to the max.  - fixes the too-many-releasing bug by incrementing the reference counter of the packet for each descriptor in the transmit queue.  This makes it possible to send a multi-iovec packet without coalescing it first.  - allows the NIC to split packets that are bigger than a single buffer (currently 4K).  Both `:can_receive()` and `:receive()` have tight loops to check for an EOP descriptor after some ready-but-partial descriptors.  This could be manually unrolled (just 3 iterations with current defaults) if benchmarks prove it to be a performance regression.  - implements the `:stop()` method for the app, in the VF case, it calls the PF if it's the last VF.  This is necessary to allow changing configurations.  (seem unrelated, but some settings (frame size in this case) persist even across process invocations, so it's impossible to properly test it without `:stop()`)", "target": 0}
{"idx": 2465, "commit_message": "pcre2: use JIT for PCRE2 matching  If the JIT is supported, lets use it. This has some rather good performance benefits with a bit of memory overhead for the JITd code pages. In particular, the cost of regex creation goes up by about 4x (using C as an example language syntax). The average runtime of those regex drops by about the same magnitude (4x). However, the worst cases can drop significantly with local tests showing an order of magnitude less (10x).  All our regex are cached by the source language, so the amount we run the regex compared to creation of them is significant.  The goal here is that we can save a lot of time during updates for other main loop work if we save how much we spend in Regex. It also means we can support larger files without timing out (currently 2msec timeout per-line before hitting protections).  Some basic numbers compariing a non-JIT PCRE2 to a JIT PCRE2. We're comparing PCRE2 in both cases, although it alone is an improvement over GRegex.  Creating regexes:    +-----------+-------+-------+------+   | Language  |  Min  |  Max  | Avg  |   +-----------+-------+-------+------+   | C         |  .001 |  .104 | .007 |   | C (JIT)   |  .004 |  .383 | .031 |   | CSS       |  .001 |  .711 | .022 |   | CSS (JIT) |  .004 | 3.147 | .101 |   | JS        |  .001 |  .186 | .011 |   | JS (JIT)  |  .003 | 4.474 | .050 |   +-----------+-------+-------+------+  Executing regexes:    +-----------+-------+-------+------+-------------------+   | Language  |  Min  |  Max  | Avg  | Notes             |   +-----------+-------+-------+------+-------------------+   | C         |  .000 |  .196 | .003 | gtktreeview.c     |   | C (JIT)   |  .000 |  .061 | .001 | gtktreeview.c     |   | CSS       |  .000 |  .211 | .022 | gtk-contained.css |   | CSS (JIT) |  .000 |  .068 | .001 | gtk-contained.css |   | JS        |  .000 |  .215 | .001 | windowManager.js  |   | JS (JIT)  |  .000 |  .108 | .000 | windowManager.js  |   +-----------+-------+-------+------+-------------------+  An important thing to remember here is how often these functions are called. Creating regexes is done a few times, while executing them are hundreds of thousands to millions of times even for just loading a file.  Since we need to highlight things between drawing of frames on the main loop anything we can do to reduce this overhead increases our ability to stay smooth while drawing. Further more, it allows for highlighting files with longer lines where we might otherwise trip up.  Fixes #158", "target": 1}
{"idx": 2652, "commit_message": "staging: wfx: use more power-efficient sleep for reset  Replace udelay() with usleep_range() as all uses are in a sleepable context.", "target": 1}
{"idx": 2251, "commit_message": "Merge pull request #469 from hackcambridge/patch/event-pages/live-page-improvements  Display events separately", "target": 0}
{"idx": 1621, "commit_message": "Add the NAS library directory, since X11 is dynamically loaded now... FIXME: See if we can dynamically load NAS", "target": 0}
{"idx": 607, "commit_message": "Updated YTD Algorithm", "target": 0}
{"idx": 1741, "commit_message": "DG MS; optimized local comments to be batched; backfilled more tests", "target": 1}
{"idx": 878, "commit_message": "Improve error handling in iTunesAd", "target": 0}
{"idx": 3524, "commit_message": "Merge pull request #2633 in VFS/op-worker from bugfix/VFS-6686-performance-tests-of-harvesting to develop  * commit 'd7e2ef2c60e648707ba2855ae0d730570d081c0a':   VFS-6686 code improvement   VFS-6686 fix stress tests of harvesting", "target": 0}
{"idx": 1692, "commit_message": "Merge pull request #2203 from darkdarkdragon/develop-addresspopoveroptimize  [FIX] optimize rpAddressPopover", "target": 0}
{"idx": 2372, "commit_message": "WebIf: Fix caching bug for images and empty oscam.js. Use javascript for auto-refresh of status page as this is much more efficient regarding caching.", "target": 1}
{"idx": 74, "commit_message": "Replace WTF::MakeUnique with std::make_unique in wtf of blink   - Replacing base::MakeUnique|WTF::MakeUnique with std::make_unique  - Replacing PtrUtil.h with <memory>  Bug: 755727", "target": 0}
{"idx": 917, "commit_message": "PR tree-optimization/81384 - built-in form of strnlen missing  gcc/ChangeLog:  \tPR tree-optimization/81384 \t* builtin-types.def (BT_FN_SIZE_CONST_STRING_SIZE): New. \t* builtins.c (expand_builtin_strnlen): New function. \t(expand_builtin): Call it. \t(fold_builtin_n): Avoid setting TREE_NO_WARNING. \t* builtins.def (BUILT_IN_STRNLEN): New. \t* calls.c (maybe_warn_nonstring_arg): Handle BUILT_IN_STRNLEN. \tWarn for bounds in excess of maximum object size. \t* tree-ssa-strlen.c (maybe_set_strlen_range): Return tree representing \tsingle-value ranges.  Handle strnlen. \t(handle_builtin_strlen): Handle strnlen. \t(strlen_check_and_optimize_stmt): Same. \t* doc/extend.texi (Other Builtins): Document strnlen.  gcc/testsuite/ChangeLog:  \tPR tree-optimization/81384 \t* gcc.c-torture/execute/builtins/lib/strnlen.c: New test. \t* gcc.c-torture/execute/builtins/strnlen-lib.c: New test. \t* gcc.c-torture/execute/builtins/strnlen.c: New test. \t* gcc.dg/attr-nonstring-2.c: New test. \t* gcc.dg/attr-nonstring-3.c: New test. \t* gcc.dg/attr-nonstring-4.c: New test. \t* gcc.dg/strlenopt-45.c: New test. \t* gcc.dg/strlenopt.h (strnlen):  Declare.  From-SVN: r261705", "target": 0}
{"idx": 3345, "commit_message": "Performance improvements", "target": 1}
{"idx": 2174, "commit_message": "Split ColumnRule field in ComputedStyle.  Currently, column-rule related properties are being stored as a single BorderValue called ColumnRule. However, it is possible to split ColumnRule into its constituent fields and generate each of them individually.  There should be no performance impact from this patch.  Diff: [URL]/3b5a55b0cedff7b4d7b9c1b196faf5a9/revisions  Bug: 628043", "target": 0}
{"idx": 1304, "commit_message": "PathGPU2: fixed a problem in Alloy material", "target": 0}
{"idx": 2490, "commit_message": "Reduce moves and allocations in `Dependency<Ptr, AnyDependency<Ptr, _>&&>`, in particular if `AnyDependencyRef<Ptr>` is initialized with `AnyDependency<Ptr, _>&&` (when it cannot have internals adopted).  In these cases there is no need to decay `AnyDependency<Ptr, _>&&` to `AnyDependency<Ptr, _>`, which requires moving it to the heap since it does not fit in inline storage of `AnyDependencyRef<Ptr>`. It is more efficient to refer to the `AnyDependency<Ptr, _>` staying in its original location.  This is done by allowing specializations of `DependencyImpl<Ptr, M&&>` (besides `DependencyImpl<P*, M&&>` with `M*` convertible to `P*`), instead of always decaying them to `DependencyImpl<Ptr, std::decay_t<M>>`. They are still decayed if they do not have dedicated specializations.  To avoid ambiguous specializations, this in turn is done by inserting an intermediate specialization layer between `DependencyImpl` and `Dependency`, called `dependency_internal::DependencyMaybeRef`, which handles cases when `Manager` is a reference: by delegating to a specialization of `DependencyImpl` if it exists, otherwise by decaying the reference to a value type.  PiperOrigin-RevId: 455623045", "target": 1}
{"idx": 2659, "commit_message": "Bug#15927744 - DEFAULT P_S CONFIGURATION WASTES CPU ON A BUSY SERVER  Prior to this fix, performance schema configuration variables that can be automatically sized by the server were given incorrect values in some cases.  Performance overhead can increase significantly with some pathological cases created by incorrect sizing, causing this bug to have a real impact.  For example, for 50,000 tables in the table open cache, the performance schema estimated that a value of 20,000 table handles was adequate. This is wrong, a proper value should be 100,000 in this case.  The problem is that the heuristic used values that got altered by  a 'sanitizing' step, supposed to prevent bad usages.  The fix is to simply remove this sanitizing step, because: - it does not resolve any problem by itself, only creates more, - it introduces hard coded values which are not based on real deployments in   production  With this fix, heuristics computed by the performance schema for automated  sizing are expected to be more adequate, for high end configurations.", "target": 1}
{"idx": 2498, "commit_message": "[POWERPC] cell: pm_rtas_activat_signals routine cleanup  The code was setting up the debug bus for group 21 when profiling on the event PPU CYCLES.  The debug bus is not actually used by the hardware performance counters when counting PPU CYCLES.  Setting up the debug bus for PPU CYCLES causes signal routing conflicts on the debug bus when profiling PPU cycles and another PPU event.  This patch fixes the code to only setup the debug bus to route the performance signals for the non PPU CYCLE events.", "target": 0}
{"idx": 2202, "commit_message": "EAS: sched/fair: tunable to force selecting at cpu granularity  EAS assumes that clusters with smaller capacity cores are more energy-efficient. This may not be true on non-big-little devices, so EAS can make incorrect cluster selections when finding a CPU to wake. The \"sched_is_big_little\" hint can be used to cause a cpu-based selection instead of cluster-based selection.", "target": 0}
{"idx": 3654, "commit_message": "17% performance improvement with big calendars.  Use the julian day ( int ) to hash the QDate.  date().toString() is expensive.", "target": 1}
{"idx": 1900, "commit_message": "Small optimization to collision detection", "target": 1}
{"idx": 1730, "commit_message": "Refactored the optimizers package into a training package.", "target": 0}
{"idx": 2572, "commit_message": "DownloaderService: convert String to Uri to avoid repeated parsing  This parses the String into a Uri once per Intent, rather than once per broadcast.  The Uri instance is also nicer to work with, since it is the native URL format for Intents.  It should make the progress updates a bit more efficient also. fdroid/fdroidclient#1742", "target": 1}
{"idx": 3946, "commit_message": "Improve MAVEN build Performance", "target": 1}
{"idx": 4, "commit_message": "testing latency", "target": 0}
{"idx": 3914, "commit_message": "performance improvements", "target": 1}
{"idx": 3600, "commit_message": "1150: L10n: - Chinese translations by sdiz and yongjhen. Bookmarks: - Update. - Add The Freenet Applications Freesite (ugly, but possibly useful for users to know more about apps, including those bundled). First-time wizard: - Change opennet warning: not \"Freenet is still alpha software\", \"Freenet is still experimental\". CPU optimisations: - Message.decodeMessageFromPacket(byte[],,,): Use ByteBufferInputStream (a new class wrapping a ByteBuffer, efficiently implementing DataInput) rather than DataInputStream(ByteArrayInputStream). Use slice() method to avoid having to allocate a new byte array, BAIS and DIS to parse a sub-message of limited size. - Serialize various objects from DataInput rather than DataInputStream, required by the above. Opennet: - Fix leak of seed clients where we got the JFK(3) but never verified. Remove 60 seconds after adding if we haven't connected. Datastore: - Fix infinite loop in shrink. Dev stuff: - Delete unused code. Unit tests: - Regression test for Rijndael. - Add (some of) the tests from the FIPS test suite.  Website: - Announce 0.7.0, codename \"Darknet\". - New sponsor: zoozle. - Update German news page. - Add a digg and a reddit button, far too late. We should do this on release!! Also on German page. - Don't have the menu float over the text. - Fix an escaping problem on the website (cross site scripting??). - Better error handling and some refactoring in includes. - Send permanent redirects when people try to access index.php?page=blah. - Fix a couple of links to index.php?page=blah. - Get rid of .htaccess which we don't use. - Be consistent on the FAQ page (ff settings) with what we use in the custom profile. - Minor tweaks w.r.t. wording referring to IRC. - Get rid of links to unmaintained tools on the tools page. Link to new ones. - Fix to 404 page. - Logging. - Remove keywords: don't have them on *every* page. - Improve rewriting rule. - Back compatibility (old URLs) bugfix.  Installer: - Update version to 0.7.0, released on \"Thursday 8 May 2008\". - Update various bugs in run.sh related to spaces in pathnames. Generally related to not quoting paths, but also one other logic error where we compared a space-substituted string with a non-space-substituted string. This broke things on OS/X, resulting in two copies of the node running at the same time and both breaking. - Fix browse.sh firefox detection on OS/X. - Warn the user if firefox is not found. - Re-enable Firefox detection on OS/X. - Maybe fix installer can't complete on OpenBSD. - Hide errors caused by an empty crontab when adding auto-start. - Chinese l10n for the installer. - Windows: Use start \"\" \"%URL%\" not start \"%URL%\". This fixes the \"it opens a command prompt called welcome.html instead of a browser\" bug for most IE users. - Windows: If start fails, load directly with Internet Explorer. Should fix failure to open a browser for other users who have broken registry and therefore no functional default browser. - Windows: Hide a command line (missing @).  dbkr j16sdiz NEOatNHNG nextgens toad tommy yongjhen zothar  Salted hash datastore branch (j16sdiz): - Quadratic probing. This should greatly improve space efficiency. - Resizing support. - Lots of bugfixes and optimisations. - Refactoring. - Better error handling.  jSite 0.4.11 (Bombe): italian translation added from Luke771. fix bug when inserting a project without default file. change label of path textfield. jSite (Bombe): - French translation fix.", "target": 0}
{"idx": 3128, "commit_message": "Improve performance of fromNode", "target": 1}
{"idx": 791, "commit_message": "sched/cputime: Fix accounting on multi-threaded processes  Recent commit (\"cputime: Use accessors to read task cputime stats\") introduced a bug, where we account many times the cputime of the first thread, instead of cputimes of all the different threads.", "target": 0}
{"idx": 2893, "commit_message": "R600: Fix typo in R600Schedule.td  This should only make a difference in programs that use a lot of the vector ALU instructions like BFI_INT and BIT_ALIGN.  There is a slight improvement in the phatk bitcoin mining kernel with this patch on Evergreen (vector size == 1):  Before: 1173 Instruction Groups / 9520 dwords  After: 1167 Instruction Groups / 9510 dwords", "target": 1}
{"idx": 1002, "commit_message": "GL: Optimize multi-view layered Clear* commands  Until this patch multi-view layered framebuffers used to be cleared by attaching a single layer of each attachment to a framebuffer and calling the Clear* command for that internal framebuffer. According to the GL 4.1+ specifications, Clear* commands clear all of the layers of an attached 2D texture array. If all of the layers are active for a multi-view layered framebuffer, then we can directly call the corresponding Clear* command instead of iterating over each layer and clearing it.  BUG=angleproject:2062 TEST=angle_end2end_tests", "target": 1}
{"idx": 2808, "commit_message": "Remove AIs dependence on encode_state  This was a significant performance bottleneck.", "target": 1}
{"idx": 645, "commit_message": "0.12dev: Merged [8740] from 0.11-stable, and improved the documentation for `trac-admin $ENV initenv --inherit=PATH` to mention how relative paths are resolved.  Closes #8724 again.", "target": 0}
{"idx": 744, "commit_message": "Merged revisions 182208 via svnmerge from  [URL]/svn/asterisk/branches/1.4  ........   r182208 | tilghman | 2009-03-16 10:39:15 -0500 (Mon, 16 Mar 2009) | 7 lines      Fixup glare detection, to fix a memory leak of a local pvt structure.   (closes issue #14656)    Reported by: caspy    Patches:           20090313__bug14656__2.diff.txt uploaded by tilghman (license 14)    Tested by: caspy ........", "target": 0}
{"idx": 4062, "commit_message": "[PATCH] Use std::make_shared instead of new...\n\nIt is more efficient, since it requires only one memory allocation in\ncontrast to two.", "target": 1}
{"idx": 1426, "commit_message": "fix-memory-leak-in-cleanup", "target": 0}
{"idx": 4047, "commit_message": "[PATCH] made GMX_FORCE_ENERGY a separate flag\n\nGMX_FORCE_ENERGY was (temporarily) defined as GMX_FORCE_VIRIAL.\nNow it is a separate flags, which is less confusing. This allows\nnstcalcenergy to be larger than nstpcouple, which improves performance\nwith the SSE and CUDA kernels.", "target": 1}
{"idx": 860, "commit_message": "Merge pull request #1327 from Alfresco/feature/AKU-1138_PreviewDialogRendering  AKU-1138: Improve PDF.js previewer height calculations for dialog", "target": 0}
{"idx": 3457, "commit_message": "lazyplug: unroll loops for better performance", "target": 1}
{"idx": 3768, "commit_message": "Make hotspare actually reload image  This also changes hotspare to use rsync instead of scp because the former is usually more performant and efficient than the latter.  Additionally, this tones down the frequency of the syncs.  10 minutes should be fine.  1 minute was too aggressive.  I renamed hotspare/hotspare.go -> hotspare/main.go to be consistent with everything else in skolo (and most other places).  BUG=skia:  Review-Url: [URL]/2141053002", "target": 1}
{"idx": 2092, "commit_message": "vectors.generic: improve support for sequences returning rvalue elements. for exception safety, instead of 'resetUnsafe + assign', use direct construction and upon an exception reset the remaining elements.", "target": 0}
{"idx": 259, "commit_message": "Use System.Memory and include it in setup", "target": 0}
{"idx": 3199, "commit_message": "Refactor bindRemoveButtons for improved performance", "target": 1}
{"idx": 4135, "commit_message": "[PATCH] use local variables for more efficient force accumulation", "target": 1}
{"idx": 34, "commit_message": "Use flx-ido for performance reasons.", "target": 0}
{"idx": 520, "commit_message": "Improve error log for image compressor  - The error logs for the image compressor should respect the   showErrStack flag.", "target": 0}
{"idx": 2735, "commit_message": "Merge pull request #54 from sezanzeb/progress-performance  ui.py split, ui performance improvement", "target": 1}
{"idx": 1489, "commit_message": "compiler: Implement element type coercion for arrays  So far, this is not exposed to the user beyond implicit conversions.  Note that all the implicit conversions, such as triggered by adding arrays of mismatching types, or dividing integer arrays, are currently emitted in a maximally inefficient way, where a temporary copy is first made for the type conversion. The conversions would more sensibly be implemented during the per-element operations to save on the extra copies, but the current behaviour fell out of the rest of the IR generator structure without extra changes.", "target": 0}
{"idx": 2022, "commit_message": "Performance improvements and bugfixes", "target": 1}
{"idx": 3609, "commit_message": "optimize melang performance", "target": 1}
{"idx": 3951, "commit_message": "Make 'svn ls -v file:///my/repos/tags' and 'svn ls --xml file:///my/repos/tags' about 20 times faster on tags directories containing far too many tags (like 8000), by simply avoiding a lot of unneeded work. (Removes 95% of the time from profile runs). The same code is also used by svnserve, and I think serf/mod_dav should be faster as well.  This patch simply makes the code just ask for the dirent fields that it really cares about, thereby skipping the request for 'has_props' which takes 95% of the time, because it fetches all properties on all the created tags (which are stored in many different revision, thereby getting very bad caching behavior).  Measurements on a repository that contains a repository with an empty /trunk dir, copied as /  to /tags/T00001 ... /tags/T08000/ each as their own revision.  The results appear to vary by the number of tags (and probably some cache size), but for 8000 revisions this changes the processing time on a ramdrive from 1 minute 11 to just 3 seconds.  I think we need a separate patch which allows filesystem implementations to answer 'has props' in a cheaper way, that doesn't trash the entire memory cache.  * subversion/svn/list-cmd.c   (print_dirent_fields,    print_dirent_fields_verbose,    print_dirent_xml_fields): New constant variables.   (svn_cl__list): Only request the required fields.", "target": 1}
{"idx": 3857, "commit_message": "- Patch #394374 by cwgordon7, wretched sinner, et al: improved language of comment status. Usability improvement based on testing in Baltimore.", "target": 0}
{"idx": 3087, "commit_message": "mmc: disable CRC check for better performance", "target": 1}
